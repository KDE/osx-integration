diff --git a/cocoa/qcocoawindow.h b/cocoa/qcocoawindow.h
index 4e8649b..9c0f143 100644
--- a/cocoa/qcocoawindow.h
+++ b/cocoa/qcocoawindow.h
@@ -368,6 +368,11 @@ public: // for QNSView
     QHash<quintptr, bool> m_enabledContentBorderAreas; // identifer -> enabled state (true/false)
 
     bool m_hasWindowFilePath;
+    bool m_fullScreenActivated;
+    QRect m_normalGeo;
+    Qt::WindowFlags m_normalFlags;
+    NSApplicationPresentationOptions m_normalPresOpts;
+    NSImage *m_windowIcon;
 };
 
 QT_END_NAMESPACE
diff --git a/src/qcocoa-qpa/qcocoawindow.mm b/src/qcocoa-qpa/qcocoawindow.mm
index b0b5e59..97925d3 100644
--- a/src/qcocoa-qpa/qcocoawindow.mm
+++ b/src/qcocoa-qpa/qcocoawindow.mm
@@ -467,6 +467,8 @@ QCocoaWindow::QCocoaWindow(QWindow *tlw, WId nativeHandle)
     , m_topContentBorderThickness(0)
     , m_bottomContentBorderThickness(0)
     , m_hasWindowFilePath(false)
+    , m_fullScreenActivated(false)
+    , m_windowIcon(nil)
 {
     qCDebug(lcQpaCocoaWindow) << "QCocoaWindow::QCocoaWindow" << window();
 
@@ -529,6 +531,7 @@ QCocoaWindow::~QCocoaWindow()
         [m_nsWindow removeChildWindow:childWindow->m_nsWindow];
     });
 
+    [m_windowIcon release];
     [m_view release];
     [m_nsWindow release];
     [m_windowCursor release];
@@ -994,7 +997,8 @@ void QCocoaWindow::setWindowFlags(Qt::WindowFlags flags)
         Qt::WindowType type = window()->type();
         if ((type & Qt::Popup) != Qt::Popup && (type & Qt::Dialog) != Qt::Dialog) {
             NSWindowCollectionBehavior behavior = [m_nsWindow collectionBehavior];
-            if (flags & Qt::WindowFullscreenButtonHint) {
+            // Ignore Qt::WindowFullscreenButtonHint if a "simple" and consistent fullscreen mode is requested.
+            if ((flags & Qt::WindowFullscreenButtonHint) && !qEnvironmentVariableIsSet("QT_CONSISTENT_FULLSCREEN")) {
                 behavior |= NSWindowCollectionBehaviorFullScreenPrimary;
                 behavior &= ~NSWindowCollectionBehaviorFullScreenAuxiliary;
             } else {
@@ -1052,14 +1056,14 @@ void QCocoaWindow::setWindowIcon(const QIcon &icon)
         [m_nsWindow setRepresentedURL:[NSURL fileURLWithPath:title]];
         iconButton = [m_nsWindow standardWindowButton:NSWindowDocumentIconButton];
     }
+    [m_windowIcon release];
     if (icon.isNull()) {
-        [iconButton setImage:nil];
+        m_windowIcon = nil;
     } else {
         QPixmap pixmap = icon.pixmap(QSize(22, 22));
-        NSImage *image = static_cast<NSImage *>(qt_mac_create_nsimage(pixmap));
-        [iconButton setImage:image];
-        [image release];
+        m_windowIcon = static_cast<NSImage *>(qt_mac_create_nsimage(pixmap));
     }
+    [iconButton setImage:m_windowIcon];
 }
 
 void QCocoaWindow::setAlertState(bool enabled)
@@ -1904,13 +1908,60 @@ void QCocoaWindow::toggleMaximized()
 
 void QCocoaWindow::toggleFullScreen()
 {
-    // The window needs to have the correct collection behavior for the
-    // toggleFullScreen call to have an effect. The collection behavior
-    // will be reset in windowDidEnterFullScreen/windowDidLeaveFullScreen.
-    m_nsWindow.collectionBehavior |= NSWindowCollectionBehaviorFullScreenPrimary;
+    // Use the "native" fullscreen mode if the window has the corresponding titlebar button
+    if (m_nsWindow.collectionBehavior & NSWindowCollectionBehaviorFullScreenPrimary) {
 
-    const id sender = m_nsWindow;
-    [m_nsWindow toggleFullScreen:sender];
+        const id sender = m_nsWindow;
+        [m_nsWindow toggleFullScreen:sender];
+    } else {
+        NSNotification *fullScreenNotification;
+        NSWindow *nsWin = m_view.window;
+        bool wasActive = ([NSApp keyWindow] == nsWin);
+#if QT_MACOS_PLATFORM_SDK_EQUAL_OR_ABOVE(__MAC_10_9)
+        bool menuBarsOnAllScreens = [NSScreen screensHaveSeparateSpaces];
+#else
+        // let's be exhaustive and assume we can be built on 10.8 or earlier
+        bool menuBarsOnAllScreens = false;
+#endif
+        if (m_fullScreenActivated) {
+            // exit from fullscreen mode
+            setWindowFlags(m_normalFlags);
+            setCocoaGeometry(m_normalGeo);
+            if (menuBarsOnAllScreens || [nsWin screen] == [[NSScreen screens] firstObject]) {
+                // m_normalPresOpts is relevant only when the window was on the primary screen
+                // when made fullscreen but that should still be the case as fullscreen windows
+                // cannot be moved (easily).
+                [NSApp setPresentationOptions:m_normalPresOpts];
+            }
+            // restore the window icon from its cached NSImage
+            [[m_nsWindow standardWindowButton:NSWindowDocumentIconButton] setImage:m_windowIcon];
+            fullScreenNotification = [NSNotification notificationWithName:NSWindowDidExitFullScreenNotification
+                object:nsWin];
+            qCDebug(lcQpaCocoaWindow) << "Back from fullscreen ; geo=" << m_normalGeo;
+        } else {
+            m_normalGeo = windowGeometry();
+            if (menuBarsOnAllScreens || [nsWin screen] == [[NSScreen screens] firstObject]) {
+                m_normalPresOpts = [NSApp presentationOptions];
+                [NSApp setPresentationOptions:m_normalPresOpts | NSApplicationPresentationAutoHideMenuBar | NSApplicationPresentationAutoHideDock];
+            }
+            m_normalFlags = m_windowFlags;
+            // unset WindowFullscreenButtonHint here because it can apparently interfere with the FramelessWindowHint,
+            // unsetting the latter and causing the window frame to be restored. Undesirable esp. since it
+            // will move the window downwards instead of resizing it.
+            setWindowFlags((m_windowFlags & ~Qt::WindowFullscreenButtonHint) | Qt::Window | Qt::FramelessWindowHint);
+            qCDebug(lcQpaCocoaWindow) << m_normalGeo << "to fullscreen" << QPlatformScreen::platformScreenForWindow(window())->geometry();
+            setCocoaGeometry(QPlatformScreen::platformScreenForWindow(window())->geometry());
+            fullScreenNotification = [NSNotification notificationWithName:NSWindowDidEnterFullScreenNotification
+                object:nsWin];
+        }
+        // send the notification used for setting m_view.window.qt_fullScreen
+        [[NSNotificationCenter defaultCenter] postNotification:fullScreenNotification];
+        if (wasActive) {
+            // make sure the operation doesn't cause a loss of focus
+            requestActivateWindow();
+        }
+    }
+    m_fullScreenActivated = !m_fullScreenActivated;
 }
 
 bool QCocoaWindow::isTransitioningToFullScreen() const
