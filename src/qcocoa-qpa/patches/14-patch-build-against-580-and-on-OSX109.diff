diff --git a/src/qcocoa-qpa/qaltoperatingsystemversion.h b/src/qcocoa-qpa/qaltoperatingsystemversion.h
new file mode 100644
index 0000000000000000000000000000000000000000..3dc7c22011af30e5af2708212ff3ec264667dfb7
--- /dev/null
+++ b/src/qcocoa-qpa/qaltoperatingsystemversion.h
@@ -0,0 +1,117 @@
+/****************************************************************************
+**
+** Copyright (C) 2016 The Qt Company Ltd.
+** Contact: https://www.qt.io/licensing/
+**
+** This file is part of the QtCore module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see https://www.qt.io/terms-conditions. For further
+** information use the contact form at https://www.qt.io/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 3 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL3 included in the
+** packaging of this file. Please review the following information to
+** ensure the GNU Lesser General Public License version 3 requirements
+** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 2.0 or (at your option) the GNU General
+** Public license version 3 or any later version approved by the KDE Free
+** Qt Foundation. The licenses are as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
+** included in the packaging of this file. Please review the following
+** information to ensure the GNU General Public License requirements will
+** be met: https://www.gnu.org/licenses/gpl-2.0.html and
+** https://www.gnu.org/licenses/gpl-3.0.html.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include <QtCore/qglobal.h>
+
+#ifndef QOPERATINGSYSTEMVERSION_H
+#define QOPERATINGSYSTEMVERSION_H
+
+QT_BEGIN_NAMESPACE
+
+class QString;
+class QVersionNumber;
+
+class Q_CORE_EXPORT QOperatingSystemVersion
+{
+public:
+    enum OSType {
+        Unknown = 0,
+        Windows,
+        MacOS,
+        IOS,
+        TvOS,
+        WatchOS,
+        Android
+    };
+
+    static const QSysInfo::MacVersion OSXMavericks = QSysInfo::MV_10_9;
+    static const QSysInfo::MacVersion OSXYosemite = QSysInfo::MV_10_10;
+    static const QSysInfo::MacVersion OSXElCapitan = QSysInfo::MV_10_11;
+    static const QSysInfo::MacVersion MacOSSierra =QSysInfo::MV_10_12;
+
+    QOperatingSystemVersion(const QOperatingSystemVersion &other) = default;
+    Q_DECL_CONSTEXPR QOperatingSystemVersion(OSType osType,
+                                             int vmajor, int vminor = -1, int vmicro = -1)
+        : m_os(osType),
+          m_major(qMax(-1, vmajor)),
+          m_minor(vmajor < 0 ? -1 : qMax(-1, vminor)),
+          m_micro(vmajor < 0 || vminor < 0 ? -1 : qMax(-1, vmicro))
+    { }
+
+    static QSysInfo::MacVersion current()
+    {
+        return QSysInfo::QSysInfo::MacintoshVersion;
+    }
+
+    Q_DECL_CONSTEXPR int majorVersion() const { return m_major; }
+    Q_DECL_CONSTEXPR int minorVersion() const { return m_minor; }
+    Q_DECL_CONSTEXPR int microVersion() const { return m_micro; }
+
+    Q_DECL_CONSTEXPR int segmentCount() const
+    { return m_micro >= 0 ? 3 : m_minor >= 0 ? 2 : m_major >= 0 ? 1 : 0; }
+
+    bool isAnyOfType(std::initializer_list<OSType> types) const;
+    Q_DECL_CONSTEXPR OSType type() const { return m_os; }
+    QString name() const;
+
+    friend bool operator>(const QOperatingSystemVersion &lhs, const QOperatingSystemVersion &rhs)
+    { return lhs.type() == rhs.type() && QOperatingSystemVersion::compare(lhs, rhs) > 0; }
+
+    friend bool operator>=(const QOperatingSystemVersion &lhs, const QOperatingSystemVersion &rhs)
+    { return lhs.type() == rhs.type() && QOperatingSystemVersion::compare(lhs, rhs) >= 0; }
+
+    friend bool operator<(const QOperatingSystemVersion &lhs, const QOperatingSystemVersion &rhs)
+    { return lhs.type() == rhs.type() && QOperatingSystemVersion::compare(lhs, rhs) < 0; }
+
+    friend bool operator<=(const QOperatingSystemVersion &lhs, const QOperatingSystemVersion &rhs)
+    { return lhs.type() == rhs.type() && QOperatingSystemVersion::compare(lhs, rhs) <= 0; }
+
+private:
+    QOperatingSystemVersion() = default;
+    OSType m_os;
+    int m_major;
+    int m_minor;
+    int m_micro;
+
+    static int compare(const QOperatingSystemVersion &v1, const QOperatingSystemVersion &v2);
+};
+
+QT_END_NAMESPACE
+
+#endif // QOPERATINGSYSTEMVERSION_H
diff --git a/src/qcocoa-qpa/qcocoafiledialoghelper.mm b/src/qcocoa-qpa/qcocoafiledialoghelper.mm
index e39d5e454688480da3093d54172b65ea0dc7a109..bc1bf073124766865fe09b1d36109062ccc8daba 100644
--- a/src/qcocoa-qpa/qcocoafiledialoghelper.mm
+++ b/src/qcocoa-qpa/qcocoafiledialoghelper.mm
@@ -63,7 +63,11 @@
 #include <stdlib.h>
 #include <qabstracteventdispatcher.h>
 #include <qsysinfo.h>
+#if QT_VERSION >= QT_VERSION_CHECK(5, 9, 0)
 #include <qoperatingsystemversion.h>
+#else
+#include <qaltoperatingsystemversion.h>
+#endif
 #include <qglobal.h>
 #include <QDir>
 
diff --git a/src/qcocoa-qpa/qcocoaintegration.h b/src/qcocoa-qpa/qcocoaintegration.h
index ecdd20c4dc06e97e4ea8a201adc63d51b4de1935..f41f023198148cf2081a32d9aad0a4a11c412776 100644
--- a/src/qcocoa-qpa/qcocoaintegration.h
+++ b/src/qcocoa-qpa/qcocoaintegration.h
@@ -126,7 +126,7 @@ public:
 
     bool hasCapability(QPlatformIntegration::Capability cap) const Q_DECL_OVERRIDE;
     QPlatformWindow *createPlatformWindow(QWindow *window) const Q_DECL_OVERRIDE;
-    QPlatformWindow *createForeignWindow(QWindow *window, WId nativeHandle) const Q_DECL_OVERRIDE;
+    QPlatformWindow *createForeignWindow(QWindow *window, WId nativeHandle) const Q_DECL_MAYBE_OVERRIDE;
 #ifndef QT_NO_OPENGL
     QPlatformOpenGLContext *createPlatformOpenGLContext(QOpenGLContext *context) const Q_DECL_OVERRIDE;
 #endif
diff --git a/src/qcocoa-qpa/qcocoatheme.h b/src/qcocoa-qpa/qcocoatheme.h
index 27c071a8cd2f82b8f880e3336ea684dd840eb830..f5e065047889aeccf0af0708468531e87ef75391 100644
--- a/src/qcocoa-qpa/qcocoatheme.h
+++ b/src/qcocoa-qpa/qcocoatheme.h
@@ -43,6 +43,14 @@
 #include <QtCore/QHash>
 #include <qpa/qplatformtheme.h>
 
+#ifndef Q_DECL_MAYBE_OVERRIDE
+#if QT_VERSION >= QT_VERSION_CHECK(5, 9, 0)
+#define Q_DECL_MAYBE_OVERRIDE   Q_DECL_OVERRIDE
+#else
+#define Q_DECL_MAYBE_OVERRIDE   /**/
+#endif
+#endif
+
 Q_FORWARD_DECLARE_OBJC_CLASS(QT_MANGLE_NAMESPACE(QCocoaThemeNotificationReceiver));
 
 QT_BEGIN_NAMESPACE
@@ -74,7 +82,7 @@ public:
 
     QVariant themeHint(ThemeHint hint) const Q_DECL_OVERRIDE;
     QString standardButtonText(int button) const Q_DECL_OVERRIDE;
-    QKeySequence standardButtonShortcut(int button) const Q_DECL_OVERRIDE;
+    QKeySequence standardButtonShortcut(int button) const Q_DECL_MAYBE_OVERRIDE;
 
     static const char *name;
 
diff --git a/src/qcocoa-qpa/qcocoatheme.mm b/src/qcocoa-qpa/qcocoatheme.mm
index a638002a426dcb5b1edc9fcc22a9473431e6ccc1..18dc1dbe85f540186ccea448d3466b8d92a6c2cc 100644
--- a/src/qcocoa-qpa/qcocoatheme.mm
+++ b/src/qcocoa-qpa/qcocoatheme.mm
@@ -346,8 +346,13 @@ QString QCocoaTheme::standardButtonText(int button) const
 
 QKeySequence QCocoaTheme::standardButtonShortcut(int button) const
 {
+#if QT_VERSION >= QT_VERSION_CHECK(5, 9, 0)
     return button == QPlatformDialogHelper::Discard ? QKeySequence(Qt::CTRL | Qt::Key_Delete)
                                                     : QPlatformTheme::standardButtonShortcut(button);
+#else
+    return button == QPlatformDialogHelper::Discard ? QKeySequence(Qt::CTRL | Qt::Key_Delete)
+                                                    : QKeySequence();
+#endif
 }
 
 QPlatformMenuItem *QCocoaTheme::createPlatformMenuItem() const
diff --git a/src/qcocoa-qpa/qcocoawindow.h b/src/qcocoa-qpa/qcocoawindow.h
index 567eb7438b4e33ae0c08c2811623b98a166239c4..4e8649b5482a7bce3582d42690a9f7ebdcb7b747 100644
--- a/src/qcocoa-qpa/qcocoawindow.h
+++ b/src/qcocoa-qpa/qcocoawindow.h
@@ -150,6 +150,14 @@ QT_BEGIN_NAMESPACE
 #define Q_NOTIFICATION_PREFIX QT_STRINGIFY2(Q_COCOA_NOTIFICATION_)
 #endif
 
+#ifndef Q_DECL_MAYBE_OVERRIDE
+#if QT_VERSION >= QT_VERSION_CHECK(5, 9, 0)
+#define Q_DECL_MAYBE_OVERRIDE   Q_DECL_OVERRIDE
+#else
+#define Q_DECL_MAYBE_OVERRIDE   /**/
+#endif
+#endif
+
 class QCocoaMenuBar;
 
 class QCocoaWindow : public QObject, public QPlatformWindow
@@ -186,7 +194,7 @@ public:
     QMargins frameMargins() const Q_DECL_OVERRIDE;
     QSurfaceFormat format() const Q_DECL_OVERRIDE;
 
-    bool isForeignWindow() const Q_DECL_OVERRIDE;
+    bool isForeignWindow() const Q_DECL_MAYBE_OVERRIDE;
 
     void requestActivateWindow() Q_DECL_OVERRIDE;
 
diff --git a/src/qcocoa-qpa/qcocoawindow.mm b/src/qcocoa-qpa/qcocoawindow.mm
index 32b918e25ebaf501ea9455e05f7c1765656ba154..b0b5e590dbc46ec690873c365b001a54eefcfb24 100644
--- a/src/qcocoa-qpa/qcocoawindow.mm
+++ b/src/qcocoa-qpa/qcocoawindow.mm
@@ -1944,8 +1944,12 @@ void QCocoaWindow::reportCurrentWindowState(bool unconditionally)
     if (!unconditionally && currentState == m_lastReportedWindowState)
         return;
 
+#if QT_VERSION >= QT_VERSION_CHECK(5, 9, 0)
     QWindowSystemInterface::handleWindowStateChanged<QWindowSystemInterface::SynchronousDelivery>(
         window(), currentState, m_lastReportedWindowState);
+#else
+    QWindowSystemInterface::handleWindowStateChanged(window(), currentState);
+#endif
     m_lastReportedWindowState = currentState;
 }
 
diff --git a/src/qcocoa-qpa/qnsview.mm b/src/qcocoa-qpa/qnsview.mm
index 1bbc4b4caa3d2381be7135a2e5a14a09ba68e3a1..e81773d29f15cade5084558afd39816e95c75269 100644
--- a/src/qcocoa-qpa/qnsview.mm
+++ b/src/qcocoa-qpa/qnsview.mm
@@ -63,6 +63,10 @@
 #include <accessibilityinspector.h>
 #endif
 
+#if QT_VERSION < QT_VERSION_CHECK(5, 9, 0)
+#include <qaltoperatingsystemversion.h>
+#endif
+
 Q_LOGGING_CATEGORY(lcQpaTouch, "qt.qpa.input.touch")
 #ifndef QT_NO_GESTURES
 Q_LOGGING_CATEGORY(lcQpaGestures, "qt.qpa.input.gestures")

