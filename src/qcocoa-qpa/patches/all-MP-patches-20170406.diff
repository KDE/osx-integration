diff --git a/cocoa/cocoa.pro b/cocoa/cocoa.pro
index 0664841..74a472b 100644
--- a/cocoa/cocoa.pro
+++ b/cocoa/cocoa.pro
@@ -80,6 +80,7 @@ qtConfig(opengl.*) {
 RESOURCES += qcocoaresources.qrc
 
 LIBS += -framework AppKit -framework Carbon -framework IOKit -lcups
+# CONFIG += qpa/basicunixfontdatabase
 
 QT += \
     core-private gui-private \
diff --git a/cocoa/messages.cpp b/cocoa/messages.cpp
index 85b814c..5e2c4fd 100644
--- a/cocoa/messages.cpp
+++ b/cocoa/messages.cpp
@@ -76,16 +76,16 @@ QPlatformMenuItem::MenuRole detectMenuRole(const QString &caption)
 {
     QString captionNoAmpersand(caption);
     captionNoAmpersand.remove(QChar('&'));
-    const QString aboutString = QCoreApplication::translate("QCocoaMenuItem", "About");
-    if (captionNoAmpersand.startsWith(aboutString, Qt::CaseInsensitive) || caption.endsWith(aboutString, Qt::CaseInsensitive))
-        return QPlatformMenuItem::AboutRole;
-    if (captionNoAmpersand.startsWith(QCoreApplication::translate("QCocoaMenuItem", "Config"), Qt::CaseInsensitive)
-        || captionNoAmpersand.startsWith(QCoreApplication::translate("QCocoaMenuItem", "Preference"), Qt::CaseInsensitive)
-        || captionNoAmpersand.startsWith(QCoreApplication::translate("QCocoaMenuItem", "Options"), Qt::CaseInsensitive)
-        || captionNoAmpersand.startsWith(QCoreApplication::translate("QCocoaMenuItem", "Setting"), Qt::CaseInsensitive)
-        || captionNoAmpersand.startsWith(QCoreApplication::translate("QCocoaMenuItem", "Setup"), Qt::CaseInsensitive)) {
-        return QPlatformMenuItem::PreferencesRole;
-    }
+//     const QString aboutString = QCoreApplication::translate("QCocoaMenuItem", "About");
+//     if (captionNoAmpersand.startsWith(aboutString, Qt::CaseInsensitive) || caption.endsWith(aboutString, Qt::CaseInsensitive))
+//         return QPlatformMenuItem::AboutRole;
+//     if (captionNoAmpersand.startsWith(QCoreApplication::translate("QCocoaMenuItem", "Config"), Qt::CaseInsensitive)
+//         || captionNoAmpersand.startsWith(QCoreApplication::translate("QCocoaMenuItem", "Preference"), Qt::CaseInsensitive)
+//         || captionNoAmpersand.startsWith(QCoreApplication::translate("QCocoaMenuItem", "Options"), Qt::CaseInsensitive)
+//         || captionNoAmpersand.startsWith(QCoreApplication::translate("QCocoaMenuItem", "Setting"), Qt::CaseInsensitive)
+//         || captionNoAmpersand.startsWith(QCoreApplication::translate("QCocoaMenuItem", "Setup"), Qt::CaseInsensitive)) {
+//         return QPlatformMenuItem::PreferencesRole;
+//     }
     if (captionNoAmpersand.startsWith(QCoreApplication::translate("QCocoaMenuItem", "Quit"), Qt::CaseInsensitive)
         || captionNoAmpersand.startsWith(QCoreApplication::translate("QCocoaMenuItem", "Exit"), Qt::CaseInsensitive)) {
         return QPlatformMenuItem::QuitRole;
diff --git a/cocoa/qcocoafontdialoghelper.mm b/cocoa/qcocoafontdialoghelper.mm
index 33dd426..295984a 100644
--- a/cocoa/qcocoafontdialoghelper.mm
+++ b/cocoa/qcocoafontdialoghelper.mm
@@ -336,19 +336,68 @@ public:
 
         int weight = 5;
         NSFontTraitMask mask = 0;
-        if (font.style() == QFont::StyleItalic) {
+        if (font.style() == QFont::StyleItalic || font.style() == QFont::StyleOblique) {
             mask |= NSItalicFontMask;
         }
-        if (font.weight() == QFont::Bold) {
-            weight = 9;
-            mask |= NSBoldFontMask;
-        }
+        // RJVB
+        // UltraLight -> 2 or 3
+        // Thin,Light -> 3, Book -> 4
+        // Normal/Regular -> 5
+        // Medium/SemiBold/Demibold -> 6,7,8
+        // Bold -> 9
+        // Ultra/Black/Heavy -> 10,11
+        QVector<int> weights;
+        switch (font.weight()) {
+            case QFont::Thin:
+                weights << 2;
+                // fall through;
+            case QFont::Light:
+            case QFont::ExtraLight:
+                weights << 3 << 4;
+                break;
+            case QFont::Normal:
+                weights << 5;
+                break;
+            case QFont::Medium:
+                weights << 6;
+                // fall through
+            case QFont::DemiBold:
+                weights << 7 << 8;
+                break;
+            case QFont::Bold:
+                weights << 9;
+                break;
+            case QFont::Black:
+                weights << 10 << 11;
+                break;
+         }
 
         QFontInfo fontInfo(font);
-        nsFont = [mgr fontWithFamily:fontInfo.family().toNSString()
-            traits:mask
-            weight:weight
-            size:fontInfo.pointSize()];
+        if (!weights.isEmpty()) {
+            for (int i = 0; i < weights.size() && !nsFont; ++i) {
+                weight = weights[i];
+                nsFont = [mgr fontWithFamily:fontInfo.family().toNSString()
+                         traits:mask
+                         weight:weight
+                         size:fontInfo.pointSize()];
+//                  qDebug() << "setCurrentFont: found" << font << "with Qt weight" << font.weight() << "as NSFont weight" << weight << "(index" << i << ")";
+//                  NSLog(@"NSFont=%@", nsFont);
+                 if ([mgr weightOfFont:const_cast<NSFont *>(nsFont)] != weight) {
+                     nsFont = NULL;
+                 }
+            }
+        }
+        if (!nsFont) {
+            // fallback to the older approach
+            if (font.weight() == QFont::Bold) {
+                weight = 9;
+                mask |= NSBoldFontMask;
+            }
+            nsFont = [mgr fontWithFamily:fontInfo.family().toNSString()
+                     traits:mask
+                     weight:weight
+                     size:fontInfo.pointSize()];
+        }
 
         [mgr setSelectedFont:const_cast<NSFont *>(nsFont) isMultiple:NO];
         mDelegate->mQtFont = font;
diff --git a/cocoa/qcocoaintegration.mm b/cocoa/qcocoaintegration.mm
index 92fffb4..1811201 100644
--- a/cocoa/qcocoaintegration.mm
+++ b/cocoa/qcocoaintegration.mm
@@ -62,6 +62,8 @@
 
 #include <IOKit/graphics/IOGraphicsLib.h>
 
+#include <private/qgenericunixthemes_p.h>
+
 static void initResources()
 {
     Q_INIT_RESOURCE(qcocoaresources);
@@ -546,14 +548,33 @@ QCocoaDrag *QCocoaIntegration::drag() const
 
 QStringList QCocoaIntegration::themeNames() const
 {
-    return QStringList(QLatin1String(QCocoaTheme::name));
+    QStringList themes;
+    themes.push_back(QLatin1String(QCocoaTheme::name));
+    const QByteArray kdeSessionVersion = qgetenv("KDE_SESSION_VERSION");
+    const int kdeVersion = kdeSessionVersion.toInt();
+    if (kdeVersion >= 4)
+        themes.push_back(QLatin1String("kde"));
+    return themes;
 }
 
 QPlatformTheme *QCocoaIntegration::createPlatformTheme(const QString &name) const
 {
-    if (name == QLatin1String(QCocoaTheme::name))
+    // qWarning() << "QCocoaIntegration::createPlatformTheme(" << name << ")";
+    if (name == QLatin1String(QCocoaTheme::name)) {
+        // qWarning() << "returning the QCocoaTheme";
         return new QCocoaTheme;
-    return QPlatformIntegration::createPlatformTheme(name);
+    }
+    QPlatformTheme *unixTheme = QGenericUnixTheme::createUnixTheme(name);
+    if (unixTheme) {
+        qDebug() << "returning QGenericUnixTheme" << unixTheme;
+        return unixTheme;
+    }
+    else {
+        unixTheme = QPlatformIntegration::createPlatformTheme(name);
+        qDebug() << "returning QPlatformIntegration::createPlatformTheme(" << name << ")=" << unixTheme;
+        return unixTheme;
+//         return QPlatformIntegration::createPlatformTheme(name);
+    }
 }
 
 QCocoaServices *QCocoaIntegration::services() const
@@ -564,7 +585,7 @@ QCocoaServices *QCocoaIntegration::services() const
 QVariant QCocoaIntegration::styleHint(StyleHint hint) const
 {
     if (hint == QPlatformIntegration::FontSmoothingGamma)
-        return 2.0;
+        return mOptions.testFlag(UseFreeTypeFontEngine)? 0.975 : 2.0;
 
     return QPlatformIntegration::styleHint(hint);
 }
diff --git a/cocoa/qcocoakeymapper.h b/cocoa/qcocoakeymapper.h
index 4ba615e..1335668 100644
--- a/cocoa/qcocoakeymapper.h
+++ b/cocoa/qcocoakeymapper.h
@@ -85,7 +85,7 @@ public:
     QList<int> possibleKeys(const QKeyEvent *event) const;
     bool updateKeyboard();
     void deleteLayouts();
-    void updateKeyMap(unsigned short macVirtualKey, QChar unicodeKey);
+    void updateKeyMap(unsigned short macVirtualKey, const QKeyEvent *event);
     void clearMappings();
 
 private:
diff --git a/cocoa/qcocoakeymapper.mm b/cocoa/qcocoakeymapper.mm
index e7952ae..29e51f9 100644
--- a/cocoa/qcocoakeymapper.mm
+++ b/cocoa/qcocoakeymapper.mm
@@ -109,13 +109,13 @@ static qt_mac_enum_mapper qt_mac_modifier_symbols[] = {
 Qt::KeyboardModifiers qt_mac_get_modifiers(int keys)
 {
 #ifdef DEBUG_KEY_BINDINGS_MODIFIERS
-    qDebug("Qt: internal: **Mapping modifiers: %d (0x%04x)", keys, keys);
+    qWarning("Qt: internal: **Mapping modifiers: %d (0x%04x)", keys, keys);
 #endif
     Qt::KeyboardModifiers ret = Qt::NoModifier;
     for (int i = 0; qt_mac_modifier_symbols[i].qt_code; i++) {
         if (keys & qt_mac_modifier_symbols[i].mac_code) {
 #ifdef DEBUG_KEY_BINDINGS_MODIFIERS
-            qDebug("Qt: internal: got modifier: %s", qt_mac_modifier_symbols[i].desc);
+            qWarning("Qt: internal: got modifier: %s", qt_mac_modifier_symbols[i].desc);
 #endif
             ret |= Qt::KeyboardModifier(qt_mac_modifier_symbols[i].qt_code);
         }
@@ -133,13 +133,13 @@ Qt::KeyboardModifiers qt_mac_get_modifiers(int keys)
 static int qt_mac_get_mac_modifiers(Qt::KeyboardModifiers keys)
 {
 #ifdef DEBUG_KEY_BINDINGS_MODIFIERS
-    qDebug("Qt: internal: **Mapping modifiers: %d (0x%04x)", (int)keys, (int)keys);
+    qWarning("Qt: internal: **Mapping modifiers: %d (0x%04x)", (int)keys, (int)keys);
 #endif
     int ret = 0;
     for (int i = 0; qt_mac_modifier_symbols[i].qt_code; i++) {
         if (keys & qt_mac_modifier_symbols[i].qt_code) {
 #ifdef DEBUG_KEY_BINDINGS_MODIFIERS
-            qDebug("Qt: internal: got modifier: %s", qt_mac_modifier_symbols[i].desc);
+            qWarning("Qt: internal: got modifier: %s", qt_mac_modifier_symbols[i].desc);
 #endif
             ret |= qt_mac_modifier_symbols[i].mac_code;
         }
@@ -270,31 +270,44 @@ static qt_mac_enum_mapper qt_mac_private_unicode[] = {
     {   0,    QT_MAC_MAP_ENUM(0) }
 };
 
-static int qt_mac_get_key(int modif, const QChar &key, int virtualKey)
+static int qt_mac_get_key(int modif, const QChar &key, int virtualKey, const QKeyEvent *event)
 {
 #ifdef DEBUG_KEY_BINDINGS
-    qDebug("**Mapping key: %d (0x%04x) - %d (0x%04x)", key.unicode(), key.unicode(), virtualKey, virtualKey);
+    if (event) {
+        qWarning("**Mapping key: %d (0x%04x|0x%04x) - %d (0x%04x)", key.unicode(), key.unicode(), event->key(), virtualKey, virtualKey);
+    } else {
+        qWarning("**Mapping key: %d (0x%04x) - %d (0x%04x)", key.unicode(), key.unicode(), virtualKey, virtualKey);
+    }
 #endif
 
+    if (event) {
+        int rawKey = event->key();
+        // check if the event's key "code" can be a 16 bit Unicode QChar or if not
+        // if it's in the appropriate range corresponding to extended Qt::Key_* codes
+        if (rawKey > 0xffff && rawKey >= Qt::Key_Escape && rawKey < Qt::Key_unknown) {
+            return rawKey;
+        }
+    }
+
     if (key == kClearCharCode && virtualKey == 0x47)
         return Qt::Key_Clear;
 
     if (key.isDigit()) {
 #ifdef DEBUG_KEY_BINDINGS
-            qDebug("%d: got key: %d", __LINE__, key.digitValue());
+            qWarning("%d: got key: %d", __LINE__, key.digitValue());
 #endif
         return key.digitValue() + Qt::Key_0;
     }
 
     if (key.isLetter()) {
 #ifdef DEBUG_KEY_BINDINGS
-        qDebug("%d: got key: %d", __LINE__, (key.toUpper().unicode() - 'A'));
+        qWarning("%d: got key: %d", __LINE__, (key.toUpper().unicode() - 'A'));
 #endif
         return (key.toUpper().unicode() - 'A') + Qt::Key_A;
     }
     if (key.isSymbol()) {
 #ifdef DEBUG_KEY_BINDINGS
-        qDebug("%d: got key: %d", __LINE__, (key.unicode()));
+        qWarning("%d: got key: %d", __LINE__, (key.unicode()));
 #endif
         return key.unicode();
     }
@@ -304,13 +317,13 @@ static int qt_mac_get_key(int modif, const QChar &key, int virtualKey)
             /* To work like Qt for X11 we issue Backtab when Shift + Tab are pressed */
             if (qt_mac_keyboard_symbols[i].qt_code == Qt::Key_Tab && (modif & Qt::ShiftModifier)) {
 #ifdef DEBUG_KEY_BINDINGS
-                qDebug("%d: got key: Qt::Key_Backtab", __LINE__);
+                qWarning("%d: got key: Qt::Key_Backtab", __LINE__);
 #endif
                 return Qt::Key_Backtab;
             }
 
 #ifdef DEBUG_KEY_BINDINGS
-            qDebug("%d: got key: %s", __LINE__, qt_mac_keyboard_symbols[i].desc);
+            qWarning("%d: got key: %s", __LINE__, qt_mac_keyboard_symbols[i].desc);
 #endif
             return qt_mac_keyboard_symbols[i].qt_code;
         }
@@ -320,7 +333,7 @@ static int qt_mac_get_key(int modif, const QChar &key, int virtualKey)
     for (int i = 0; qt_mac_keyvkey_symbols[i].qt_code; i++) {
         if (qt_mac_keyvkey_symbols[i].mac_code == virtualKey) {
 #ifdef DEBUG_KEY_BINDINGS
-            qDebug("%d: got key: %s", __LINE__, qt_mac_keyvkey_symbols[i].desc);
+            qWarning("%d: got key: %s", __LINE__, qt_mac_keyvkey_symbols[i].desc);
 #endif
             return qt_mac_keyvkey_symbols[i].qt_code;
         }
@@ -341,7 +354,7 @@ static int qt_mac_get_key(int modif, const QChar &key, int virtualKey)
 
     //oh well
 #ifdef DEBUG_KEY_BINDINGS
-    qDebug("Unknown case.. %s:%d %d[%d] %d", __FILE__, __LINE__, key.unicode(), key.toLatin1(), virtualKey);
+    qWarning("Unknown case.. %s:%d %d[%d] %d", __FILE__, __LINE__, key.unicode(), key.toLatin1(), virtualKey);
 #endif
     return Qt::Key_unknown;
 }
@@ -366,7 +379,9 @@ Qt::KeyboardModifiers QCocoaKeyMapper::queryKeyboardModifiers()
 bool QCocoaKeyMapper::updateKeyboard()
 {
     const UCKeyboardLayout *uchrData = 0;
-    QCFType<TISInputSourceRef> source = TISCopyCurrentKeyboardInputSource();
+    QCFType<TISInputSourceRef> source = TISCopyInputMethodKeyboardLayoutOverride();
+    if (!source)
+        source = TISCopyCurrentKeyboardInputSource();
     if (keyboard_mode != NullMode && source == currentInputSource) {
         return false;
     }
@@ -414,8 +429,9 @@ void QCocoaKeyMapper::clearMappings()
     updateKeyboard();
 }
 
-void QCocoaKeyMapper::updateKeyMap(unsigned short macVirtualKey, QChar unicodeKey)
+void QCocoaKeyMapper::updateKeyMap(unsigned short macVirtualKey, const QKeyEvent *event)
 {
+    QChar unicodeKey = QChar(event->key());
     if (updateKeyboard()) {
         // ### Qt 4 did this:
         // QKeyMapper::changeKeyboard();
@@ -426,6 +442,9 @@ void QCocoaKeyMapper::updateKeyMap(unsigned short macVirtualKey, QChar unicodeKe
     UniCharCount buffer_size = 10;
     UniChar buffer[buffer_size];
     keyLayout[macVirtualKey] = new KeyboardLayoutItem;
+#ifdef DEBUG_KEY_BINDINGS
+    qWarning("updateKeyMap for virtual key = 0x%02x unicodeKey=0x%04x!", (uint)macVirtualKey, unicodeKey);
+#endif
     for (int i = 0; i < 16; ++i) {
         UniCharCount out_buffer_size = 0;
         keyLayout[macVirtualKey]->qtKey[i] = 0;
@@ -435,21 +454,21 @@ void QCocoaKeyMapper::updateKeyMap(unsigned short macVirtualKey, QChar unicodeKe
                                       keyboard_kind, 0, &keyboard_dead, buffer_size, &out_buffer_size, buffer);
         if (err == noErr && out_buffer_size) {
             const QChar unicode(buffer[0]);
-            int qtkey = qt_mac_get_key(keyModifier, unicode, macVirtualKey);
+            int qtkey = qt_mac_get_key(keyModifier, unicode, macVirtualKey, NULL);
             if (qtkey == Qt::Key_unknown)
                 qtkey = unicode.unicode();
             keyLayout[macVirtualKey]->qtKey[i] = qtkey;
         } else {
-            int qtkey = qt_mac_get_key(keyModifier, unicodeKey, macVirtualKey);
+            int qtkey = qt_mac_get_key(keyModifier, unicodeKey, macVirtualKey, event);
             if (qtkey == Qt::Key_unknown)
                 qtkey = unicodeKey.unicode();
             keyLayout[macVirtualKey]->qtKey[i] = qtkey;
         }
     }
 #ifdef DEBUG_KEY_MAPS
-    qDebug("updateKeyMap for virtual key = 0x%02x!", (uint)macVirtualKey);
+    qWarning("updateKeyMap for virtual key = 0x%02x unicodeKey=0x%04x!", (uint)macVirtualKey, unicodeKey);
     for (int i = 0; i < 16; ++i) {
-        qDebug("    [%d] (%d,0x%02x,'%c')", i,
+        qWarning("    [%d] (%d,0x%02x,'%c')", i,
                keyLayout[macVirtualKey]->qtKey[i],
                keyLayout[macVirtualKey]->qtKey[i],
                keyLayout[macVirtualKey]->qtKey[i]);
@@ -460,7 +479,7 @@ void QCocoaKeyMapper::updateKeyMap(unsigned short macVirtualKey, QChar unicodeKe
 QList<int> QCocoaKeyMapper::possibleKeys(const QKeyEvent *event) const
 {
     QList<int> ret;
-    const_cast<QCocoaKeyMapper *>(this)->updateKeyMap(event->nativeVirtualKey(), QChar(event->key()));
+    const_cast<QCocoaKeyMapper *>(this)->updateKeyMap(event->nativeVirtualKey(), event);
 
     KeyboardLayoutItem *kbItem = keyLayout[event->nativeVirtualKey()];
 
diff --git a/cocoa/qcocoamenu.mm b/cocoa/qcocoamenu.mm
index e177a24..0a8ed6c 100644
--- a/cocoa/qcocoamenu.mm
+++ b/cocoa/qcocoamenu.mm
@@ -343,6 +343,19 @@ void QCocoaMenu::insertNative(QCocoaMenuItem *item, QCocoaMenuItem *beforeItem)
     if (item->isMerged())
         return;
 
+    NSMenu *m = [item->nsItem() menu];
+    if (m) {
+        QString mTitle = QString::fromNSString([m title]);
+        if (beforeItem) {
+            qWarning() << Q_FUNC_INFO << "Menu item" << item->text() << "is already in menu" << mTitle
+                       << "after item" << beforeItem->text()
+                       << ", remove it from the other menu first before inserting into" << QString::fromNSString([nsMenu() title]);
+        } else {
+            qWarning() << Q_FUNC_INFO << "Menu item" << item->text() << "is already in menu" << mTitle
+                       << ", remove it from the other menu first before inserting into" << QString::fromNSString([nsMenu() title]);
+        }
+        return;
+    }
     // if the item we're inserting before is merged, skip along until
     // we find a non-merged real item to insert ahead of.
     while (beforeItem && beforeItem->isMerged()) {
@@ -359,9 +372,18 @@ void QCocoaMenu::insertNative(QCocoaMenuItem *item, QCocoaMenuItem *beforeItem)
             qWarning("No non-merged before menu item found");
             return;
         }
+        if (item->isSeparator() && !item->text().isEmpty()) {
+            // menu section: add a separator before the section title text
+            const NSInteger idx = [m_nativeMenu indexOfItem:beforeItem->nsItem()];
+            [m_nativeMenu insertItem:[NSMenuItem separatorItem] atIndex:idx];
+        }
         const NSInteger nativeIndex = [m_nativeMenu indexOfItem:beforeItem->nsItem()];
         [m_nativeMenu insertItem:nativeItem atIndex:nativeIndex];
     } else {
+        if (item->isSeparator() && !item->text().isEmpty()) {
+            // menu section: add a separator before the section title text
+            [m_nativeMenu addItem:[NSMenuItem separatorItem]];
+        }
         [m_nativeMenu addItem:nativeItem];
     }
     item->setMenuParent(this);
@@ -395,7 +417,8 @@ void QCocoaMenu::removeMenuItem(QPlatformMenuItem *menuItem)
     m_menuItems.removeOne(cocoaItem);
     if (!cocoaItem->isMerged()) {
         if (m_nativeMenu != [cocoaItem->nsItem() menu]) {
-            qWarning("Item to remove does not belong to this menu");
+            qWarning() << Q_FUNC_INFO << "Item" << cocoaItem->text() << "to remove does not belong to this menu"
+                << QString::fromNSString([nsMenu() title]);
             return;
         }
         [m_nativeMenu removeItem: cocoaItem->nsItem()];
@@ -474,7 +497,7 @@ void QCocoaMenu::syncSeparatorsCollapsible(bool enable)
         }
     } else {
         foreach (QCocoaMenuItem *item, m_menuItems) {
-            if (!item->isSeparator())
+            if (!item->isSeparator() || !item->text().isEmpty())
                 continue;
 
             // sync the visiblity directly
diff --git a/cocoa/qcocoamenuitem.mm b/cocoa/qcocoamenuitem.mm
index 21f2b4d..2b47e9b 100644
--- a/cocoa/qcocoamenuitem.mm
+++ b/cocoa/qcocoamenuitem.mm
@@ -222,13 +222,18 @@ void QCocoaMenuItem::setNativeContents(WId item)
 
 NSMenuItem *QCocoaMenuItem::sync()
 {
-    if (m_isSeparator != [m_native isSeparatorItem]) {
+    bool isNativeSeparator = [m_native isSeparatorItem];
+    bool noText = m_text.isEmpty();
+    if ( (m_isSeparator != isNativeSeparator && noText)
+        || (isNativeSeparator && !noText)) {
         [m_native release];
-        if (m_isSeparator) {
+        if (m_isSeparator && m_text.isEmpty()) {
             m_native = [[NSMenuItem separatorItem] retain];
             [m_native setTag:reinterpret_cast<NSInteger>(this)];
-        } else
+        } else {
             m_native = nil;
+            isNativeSeparator = false;
+        }
     }
 
     if ((m_role != NoRole && !m_textSynced) || m_merged) {
@@ -329,22 +334,49 @@ NSMenuItem *QCocoaMenuItem::sync()
 
     QString finalString = QPlatformTheme::removeMnemonics(text);
     bool useAttributedTitle = false;
+    NSFont *customMenuFont = NULL;
+    NSMutableArray *keys = [NSMutableArray arrayWithCapacity:1];
+    NSMutableArray *objects = [NSMutableArray arrayWithCapacity:1];
     // Cocoa Font and title
     if (m_font.resolve()) {
-        NSFont *customMenuFont = [NSFont fontWithName:m_font.family().toNSString()
+        customMenuFont = [NSFont fontWithName:m_font.family().toNSString()
                                   size:m_font.pointSize()];
         if (customMenuFont) {
-            NSArray *keys = [NSArray arrayWithObjects:NSFontAttributeName, nil];
-            NSArray *objects = [NSArray arrayWithObjects:customMenuFont, nil];
-            NSDictionary *attributes = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
-            NSAttributedString *str = [[[NSAttributedString alloc] initWithString:finalString.toNSString()
-                                     attributes:attributes] autorelease];
-            [m_native setAttributedTitle: str];
+            [keys addObject:NSFontAttributeName];
+            [objects addObject:customMenuFont];
             useAttributedTitle = true;
         }
     }
+    if (m_isSeparator && !m_text.isEmpty()) {
+        if (!customMenuFont) {
+            // make sure we use an appropriate font
+            customMenuFont = [NSFont menuBarFontOfSize:0];
+            if (customMenuFont) {
+                [keys addObject:NSFontAttributeName];
+                [objects addObject:customMenuFont];
+            }
+        }
+        [keys addObject:NSUnderlineStyleAttributeName];
+        [objects addObject:[NSNumber numberWithInt:NSUnderlineStyleSingle|NSUnderlinePatternSolid]];
+        // the text will be drawn with a slightly heavier stroke:
+        [keys addObject:NSStrokeWidthAttributeName];
+        [objects addObject:[NSNumber numberWithDouble:-1.5]];
+        // narrow the text ever so slightly:
+        [keys addObject:NSExpansionAttributeName];
+        [objects addObject:[NSNumber numberWithDouble:-0.05]];
+        // add some additional vertical space:
+        [keys addObject:NSBaselineOffsetAttributeName];
+        [objects addObject:[NSNumber numberWithDouble:-5]];
+        useAttributedTitle = true;
+        setEnabled(false);
+    }
     if (!useAttributedTitle) {
        [m_native setTitle:finalString.toNSString()];
+    } else {
+        NSDictionary *attributes = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
+        NSAttributedString *str = [[[NSAttributedString alloc] initWithString:finalString.toNSString()
+                                 attributes:attributes] autorelease];
+        [m_native setAttributedTitle: str];
     }
 
 #ifndef QT_NO_SHORTCUT
diff --git a/cocoa/qcocoanativeinterface.mm b/cocoa/qcocoanativeinterface.mm
index 9722303..b0eacc2 100644
--- a/cocoa/qcocoanativeinterface.mm
+++ b/cocoa/qcocoanativeinterface.mm
@@ -260,6 +260,7 @@ void QCocoaNativeInterface::setDockMenu(QPlatformMenu *platformMenu)
 
 void *QCocoaNativeInterface::qMenuToNSMenu(QPlatformMenu *platformMenu)
 {
+    QMacAutoReleasePool pool;
     QCocoaMenu *cocoaPlatformMenu = static_cast<QCocoaMenu *>(platformMenu);
     NSMenu *menu = cocoaPlatformMenu->nsMenu();
     return reinterpret_cast<void *>(menu);
diff --git a/cocoa/qcocoawindow.mm b/cocoa/qcocoawindow.mm
index 602da0a..9595485 100644
--- a/cocoa/qcocoawindow.mm
+++ b/cocoa/qcocoawindow.mm
@@ -388,6 +388,8 @@ QCocoaWindow::QCocoaWindow(QWindow *tlw)
 
     if (tlw->type() == Qt::ForeignWindow) {
         m_view = (NSView *)WId(tlw->property("_q_foreignWinId").value<WId>());
+        // get a lease on the view we don't own so we can treat it as if we did
+        [m_view retain];
     } else {
         m_view = [[QNSView alloc] initWithCocoaWindow:this];
         // Enable high-dpi OpenGL for retina displays. Enabling has the side
@@ -1727,6 +1729,8 @@ void QCocoaWindow::applyContentBorderThickness(NSWindow *window)
     if (!window)
         return;
 
+    QMacAutoReleasePool pool;
+
     if (!m_drawContentBorderGradient) {
         [window setStyleMask:[window styleMask] & ~NSTexturedBackgroundWindowMask];
         [[[window contentView] superview] setNeedsDisplay:YES];
@@ -1822,7 +1826,7 @@ void QCocoaWindow::exposeWindow()
     NSUInteger screenIndex = [[NSScreen screens] indexOfObject:m_nsWindow.screen];
     if (screenIndex != NSNotFound) {
         QCocoaScreen *cocoaScreen = QCocoaIntegration::instance()->screenAtIndex(screenIndex);
-        if (cocoaScreen)
+        if (cocoaScreen && !window()->parent())
             window()->setScreen(cocoaScreen->screen());
     }
 
diff --git a/cocoa/qnsview.mm b/cocoa/qnsview.mm
index a63bc4d..2501513 100644
--- a/cocoa/qnsview.mm
+++ b/cocoa/qnsview.mm
@@ -1523,15 +1523,16 @@ static QTabletEvent::TabletDevice wacomTabletDevice(NSEvent *theEvent)
 
 + (Qt::KeyboardModifiers) convertKeyModifiers : (ulong)modifierFlags
 {
+    const bool swapCtrlAndMeta = !qApp->testAttribute(Qt::AA_MacDontSwapCtrlAndMeta);
     Qt::KeyboardModifiers qtMods =Qt::NoModifier;
     if (modifierFlags &  NSShiftKeyMask)
         qtMods |= Qt::ShiftModifier;
     if (modifierFlags & NSControlKeyMask)
-        qtMods |= Qt::MetaModifier;
+        qtMods |= (swapCtrlAndMeta ? Qt::MetaModifier : Qt::ControlModifier);
     if (modifierFlags & NSAlternateKeyMask)
         qtMods |= Qt::AltModifier;
     if (modifierFlags & NSCommandKeyMask)
-        qtMods |= Qt::ControlModifier;
+        qtMods |= (swapCtrlAndMeta ? Qt::ControlModifier : Qt::MetaModifier);
     if (modifierFlags & NSNumericPadKeyMask)
         qtMods |= Qt::KeypadModifier;
     return qtMods;
@@ -1555,10 +1556,11 @@ static QTabletEvent::TabletDevice wacomTabletDevice(NSEvent *theEvent)
     quint32 nativeScanCode = 1;
     quint32 nativeVirtualKey = [nsevent keyCode];
 
+    const bool swapCtrlAndMeta = !qApp->testAttribute(Qt::AA_MacDontSwapCtrlAndMeta);
     QChar ch = QChar::ReplacementCharacter;
     int keyCode = Qt::Key_unknown;
     if ([characters length] != 0) {
-        if (((modifiers & Qt::MetaModifier) || (modifiers & Qt::AltModifier)) && ([charactersIgnoringModifiers length] != 0))
+        if (((modifiers & (swapCtrlAndMeta ? Qt::MetaModifier : Qt::ControlModifier)) || (modifiers & Qt::AltModifier)) && ([charactersIgnoringModifiers length] != 0))
             ch = QChar([charactersIgnoringModifiers characterAtIndex:0]);
         else
             ch = QChar([characters characterAtIndex:0]);
@@ -1584,6 +1586,18 @@ static QTabletEvent::TabletDevice wacomTabletDevice(NSEvent *theEvent)
 
     if (eventType == QEvent::KeyPress) {
 
+        if (keyCode == Qt::Key_Menu && modifiers == Qt::NoModifier) {
+            QPoint globalPos, pos;
+            if (window) {
+                QNSView *targetView = (QNSView*)(window->winId());
+                QPointF qtWindowPoint, qtScreenPoint;
+                [targetView convertFromScreen:[nsevent locationInWindow] toWindowPoint:&qtWindowPoint andScreenPoint:&qtScreenPoint];
+                globalPos = qtScreenPoint.toPoint();
+                pos = qtWindowPoint.toPoint();
+            }
+            QWindowSystemInterface::handleContextMenuEvent(window, false, pos, globalPos, modifiers);
+        }
+
         if (m_composingText.isEmpty()) {
             m_sendKeyEvent = !QWindowSystemInterface::handleShortcutEvent(window, timestamp, keyCode,
                 modifiers, nativeScanCode, nativeVirtualKey, nativeModifiers, text, [nsevent isARepeat], 1);
@@ -1685,6 +1699,7 @@ static QTabletEvent::TabletDevice wacomTabletDevice(NSEvent *theEvent)
     ulong lastKnownModifiers = m_lastKnownModifiers;
     ulong delta = lastKnownModifiers ^ modifiers;
     m_lastKnownModifiers = modifiers;
+    const bool swapCtrlAndMeta = !qApp->testAttribute(Qt::AA_MacDontSwapCtrlAndMeta);
 
     struct qt_mac_enum_mapper
     {
@@ -1693,8 +1708,8 @@ static QTabletEvent::TabletDevice wacomTabletDevice(NSEvent *theEvent)
     };
     static qt_mac_enum_mapper modifier_key_symbols[] = {
         { NSShiftKeyMask, Qt::Key_Shift },
-        { NSControlKeyMask, Qt::Key_Meta },
-        { NSCommandKeyMask, Qt::Key_Control },
+        { NSControlKeyMask, (swapCtrlAndMeta ? Qt::Key_Meta :  Qt::Key_Control) },
+        { NSCommandKeyMask, (swapCtrlAndMeta ? Qt::Key_Control : Qt::Key_Meta) },
         { NSAlternateKeyMask, Qt::Key_Alt },
         { NSAlphaShiftKeyMask, Qt::Key_CapsLock },
         { 0ul, Qt::Key_unknown } };
