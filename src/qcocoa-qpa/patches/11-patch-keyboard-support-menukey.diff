diff --git a/cocoa/qcocoakeymapper.h b/cocoa/qcocoakeymapper.h
index 4ba615e..1335668 100644
--- a/cocoa/qcocoakeymapper.h
+++ b/cocoa/qcocoakeymapper.h
@@ -85,7 +85,7 @@ public:
     QList<int> possibleKeys(const QKeyEvent *event) const;
     bool updateKeyboard();
     void deleteLayouts();
-    void updateKeyMap(unsigned short macVirtualKey, QChar unicodeKey);
+    void updateKeyMap(unsigned short macVirtualKey, const QKeyEvent *event);
     void clearMappings();
 
 private:
diff --git a/cocoa/qcocoakeymapper.mm b/cocoa/qcocoakeymapper.mm
index e7952ae..1dd6a25 100644
--- a/cocoa/qcocoakeymapper.mm
+++ b/cocoa/qcocoakeymapper.mm
@@ -109,13 +109,13 @@ static qt_mac_enum_mapper qt_mac_modifier_symbols[] = {
 Qt::KeyboardModifiers qt_mac_get_modifiers(int keys)
 {
 #ifdef DEBUG_KEY_BINDINGS_MODIFIERS
-    qDebug("Qt: internal: **Mapping modifiers: %d (0x%04x)", keys, keys);
+    qWarning("Qt: internal: **Mapping modifiers: %d (0x%04x)", keys, keys);
 #endif
     Qt::KeyboardModifiers ret = Qt::NoModifier;
     for (int i = 0; qt_mac_modifier_symbols[i].qt_code; i++) {
         if (keys & qt_mac_modifier_symbols[i].mac_code) {
 #ifdef DEBUG_KEY_BINDINGS_MODIFIERS
-            qDebug("Qt: internal: got modifier: %s", qt_mac_modifier_symbols[i].desc);
+            qWarning("Qt: internal: got modifier: %s", qt_mac_modifier_symbols[i].desc);
 #endif
             ret |= Qt::KeyboardModifier(qt_mac_modifier_symbols[i].qt_code);
         }
@@ -133,13 +133,13 @@ Qt::KeyboardModifiers qt_mac_get_modifiers(int keys)
 static int qt_mac_get_mac_modifiers(Qt::KeyboardModifiers keys)
 {
 #ifdef DEBUG_KEY_BINDINGS_MODIFIERS
-    qDebug("Qt: internal: **Mapping modifiers: %d (0x%04x)", (int)keys, (int)keys);
+    qWarning("Qt: internal: **Mapping modifiers: %d (0x%04x)", (int)keys, (int)keys);
 #endif
     int ret = 0;
     for (int i = 0; qt_mac_modifier_symbols[i].qt_code; i++) {
         if (keys & qt_mac_modifier_symbols[i].qt_code) {
 #ifdef DEBUG_KEY_BINDINGS_MODIFIERS
-            qDebug("Qt: internal: got modifier: %s", qt_mac_modifier_symbols[i].desc);
+            qWarning("Qt: internal: got modifier: %s", qt_mac_modifier_symbols[i].desc);
 #endif
             ret |= qt_mac_modifier_symbols[i].mac_code;
         }
@@ -270,31 +270,44 @@ static qt_mac_enum_mapper qt_mac_private_unicode[] = {
     {   0,    QT_MAC_MAP_ENUM(0) }
 };
 
-static int qt_mac_get_key(int modif, const QChar &key, int virtualKey)
+static int qt_mac_get_key(int modif, const QChar &key, int virtualKey, const QKeyEvent *event)
 {
 #ifdef DEBUG_KEY_BINDINGS
-    qDebug("**Mapping key: %d (0x%04x) - %d (0x%04x)", key.unicode(), key.unicode(), virtualKey, virtualKey);
+    if (event) {
+        qWarning("**Mapping key: %d (0x%04x|0x%04x) - %d (0x%04x)", key.unicode(), key.unicode(), event->key(), virtualKey, virtualKey);
+    } else {
+        qWarning("**Mapping key: %d (0x%04x) - %d (0x%04x)", key.unicode(), key.unicode(), virtualKey, virtualKey);
+    }
 #endif
 
+    if (event) {
+        int rawKey = event->key();
+        // check if the event's key "code" can be a 16 bit Unicode QChar or if not
+        // if it's in the appropriate range corresponding to extended Qt::Key_* codes
+        if (rawKey > 0xffff && rawKey >= Qt::Key_Escape && rawKey < Qt::Key_unknown) {
+            return rawKey;
+        }
+    }
+
     if (key == kClearCharCode && virtualKey == 0x47)
         return Qt::Key_Clear;
 
     if (key.isDigit()) {
 #ifdef DEBUG_KEY_BINDINGS
-            qDebug("%d: got key: %d", __LINE__, key.digitValue());
+            qWarning("%d: got key: %d", __LINE__, key.digitValue());
 #endif
         return key.digitValue() + Qt::Key_0;
     }
 
     if (key.isLetter()) {
 #ifdef DEBUG_KEY_BINDINGS
-        qDebug("%d: got key: %d", __LINE__, (key.toUpper().unicode() - 'A'));
+        qWarning("%d: got key: %d", __LINE__, (key.toUpper().unicode() - 'A'));
 #endif
         return (key.toUpper().unicode() - 'A') + Qt::Key_A;
     }
     if (key.isSymbol()) {
 #ifdef DEBUG_KEY_BINDINGS
-        qDebug("%d: got key: %d", __LINE__, (key.unicode()));
+        qWarning("%d: got key: %d", __LINE__, (key.unicode()));
 #endif
         return key.unicode();
     }
@@ -304,13 +317,13 @@ static int qt_mac_get_key(int modif, const QChar &key, int virtualKey)
             /* To work like Qt for X11 we issue Backtab when Shift + Tab are pressed */
             if (qt_mac_keyboard_symbols[i].qt_code == Qt::Key_Tab && (modif & Qt::ShiftModifier)) {
 #ifdef DEBUG_KEY_BINDINGS
-                qDebug("%d: got key: Qt::Key_Backtab", __LINE__);
+                qWarning("%d: got key: Qt::Key_Backtab", __LINE__);
 #endif
                 return Qt::Key_Backtab;
             }
 
 #ifdef DEBUG_KEY_BINDINGS
-            qDebug("%d: got key: %s", __LINE__, qt_mac_keyboard_symbols[i].desc);
+            qWarning("%d: got key: %s", __LINE__, qt_mac_keyboard_symbols[i].desc);
 #endif
             return qt_mac_keyboard_symbols[i].qt_code;
         }
@@ -320,7 +333,7 @@ static int qt_mac_get_key(int modif, const QChar &key, int virtualKey)
     for (int i = 0; qt_mac_keyvkey_symbols[i].qt_code; i++) {
         if (qt_mac_keyvkey_symbols[i].mac_code == virtualKey) {
 #ifdef DEBUG_KEY_BINDINGS
-            qDebug("%d: got key: %s", __LINE__, qt_mac_keyvkey_symbols[i].desc);
+            qWarning("%d: got key: %s", __LINE__, qt_mac_keyvkey_symbols[i].desc);
 #endif
             return qt_mac_keyvkey_symbols[i].qt_code;
         }
@@ -341,7 +354,7 @@ static int qt_mac_get_key(int modif, const QChar &key, int virtualKey)
 
     //oh well
 #ifdef DEBUG_KEY_BINDINGS
-    qDebug("Unknown case.. %s:%d %d[%d] %d", __FILE__, __LINE__, key.unicode(), key.toLatin1(), virtualKey);
+    qWarning("Unknown case.. %s:%d %d[%d] %d", __FILE__, __LINE__, key.unicode(), key.toLatin1(), virtualKey);
 #endif
     return Qt::Key_unknown;
 }
@@ -414,8 +427,9 @@ void QCocoaKeyMapper::clearMappings()
     updateKeyboard();
 }
 
-void QCocoaKeyMapper::updateKeyMap(unsigned short macVirtualKey, QChar unicodeKey)
+void QCocoaKeyMapper::updateKeyMap(unsigned short macVirtualKey, const QKeyEvent *event)
 {
+    QChar unicodeKey = QChar(event->key());
     if (updateKeyboard()) {
         // ### Qt 4 did this:
         // QKeyMapper::changeKeyboard();
@@ -426,6 +440,9 @@ void QCocoaKeyMapper::updateKeyMap(unsigned short macVirtualKey, QChar unicodeKe
     UniCharCount buffer_size = 10;
     UniChar buffer[buffer_size];
     keyLayout[macVirtualKey] = new KeyboardLayoutItem;
+#ifdef DEBUG_KEY_BINDINGS
+    qWarning("updateKeyMap for virtual key = 0x%02x unicodeKey=0x%04x!", (uint)macVirtualKey, unicodeKey);
+#endif
     for (int i = 0; i < 16; ++i) {
         UniCharCount out_buffer_size = 0;
         keyLayout[macVirtualKey]->qtKey[i] = 0;
@@ -435,21 +452,21 @@ void QCocoaKeyMapper::updateKeyMap(unsigned short macVirtualKey, QChar unicodeKe
                                       keyboard_kind, 0, &keyboard_dead, buffer_size, &out_buffer_size, buffer);
         if (err == noErr && out_buffer_size) {
             const QChar unicode(buffer[0]);
-            int qtkey = qt_mac_get_key(keyModifier, unicode, macVirtualKey);
+            int qtkey = qt_mac_get_key(keyModifier, unicode, macVirtualKey, NULL);
             if (qtkey == Qt::Key_unknown)
                 qtkey = unicode.unicode();
             keyLayout[macVirtualKey]->qtKey[i] = qtkey;
         } else {
-            int qtkey = qt_mac_get_key(keyModifier, unicodeKey, macVirtualKey);
+            int qtkey = qt_mac_get_key(keyModifier, unicodeKey, macVirtualKey, event);
             if (qtkey == Qt::Key_unknown)
                 qtkey = unicodeKey.unicode();
             keyLayout[macVirtualKey]->qtKey[i] = qtkey;
         }
     }
 #ifdef DEBUG_KEY_MAPS
-    qDebug("updateKeyMap for virtual key = 0x%02x!", (uint)macVirtualKey);
+    qWarning("updateKeyMap for virtual key = 0x%02x unicodeKey=0x%04x!", (uint)macVirtualKey, unicodeKey);
     for (int i = 0; i < 16; ++i) {
-        qDebug("    [%d] (%d,0x%02x,'%c')", i,
+        qWarning("    [%d] (%d,0x%02x,'%c')", i,
                keyLayout[macVirtualKey]->qtKey[i],
                keyLayout[macVirtualKey]->qtKey[i],
                keyLayout[macVirtualKey]->qtKey[i]);
@@ -460,7 +477,7 @@ void QCocoaKeyMapper::updateKeyMap(unsigned short macVirtualKey, QChar unicodeKe
 QList<int> QCocoaKeyMapper::possibleKeys(const QKeyEvent *event) const
 {
     QList<int> ret;
-    const_cast<QCocoaKeyMapper *>(this)->updateKeyMap(event->nativeVirtualKey(), QChar(event->key()));
+    const_cast<QCocoaKeyMapper *>(this)->updateKeyMap(event->nativeVirtualKey(), event);
 
     KeyboardLayoutItem *kbItem = keyLayout[event->nativeVirtualKey()];
 
diff --git a/cocoa/qnsview.mm b/cocoa/qnsview.mm
index e74b251..903a625 100644
--- a/cocoa/qnsview.mm
+++ b/cocoa/qnsview.mm
@@ -1588,6 +1588,18 @@ static QTabletEvent::TabletDevice wacomTabletDevice(NSEvent *theEvent)
 
     if (eventType == QEvent::KeyPress) {
 
+        if (keyCode == Qt::Key_Menu && modifiers == Qt::NoModifier) {
+            QPoint globalPos, pos;
+            if (window) {
+                QNSView *targetView = (QNSView*)(window->winId());
+                QPointF qtWindowPoint, qtScreenPoint;
+                [targetView convertFromScreen:[nsevent locationInWindow] toWindowPoint:&qtWindowPoint andScreenPoint:&qtScreenPoint];
+                globalPos = qtScreenPoint.toPoint();
+                pos = qtWindowPoint.toPoint();
+            }
+            QWindowSystemInterface::handleContextMenuEvent(window, false, pos, globalPos, modifiers);
+        }
+
         if (m_composingText.isEmpty()) {
             m_sendKeyEvent = !QWindowSystemInterface::handleShortcutEvent(window, timestamp, keyCode,
                 modifiers, nativeScanCode, nativeVirtualKey, nativeModifiers, text, [nsevent isARepeat], 1);
