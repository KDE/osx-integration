diff --git a/cocoa/qcocoawindow.h b/cocoa/qcocoawindow.h
index 16639fd..783bb92 100644
--- a/cocoa/qcocoawindow.h
+++ b/cocoa/qcocoawindow.h
@@ -326,6 +326,8 @@ public: // for QNSView
     QHash<quintptr, bool> m_enabledContentBorderAreas; // identifer -> enabled state (true/false)
 
     bool m_hasWindowFilePath;
+
+    NSImage *m_windowIcon;
 };
 
 QT_END_NAMESPACE
diff --git a/cocoa/qcocoawindow.mm b/cocoa/qcocoawindow.mm
index f03809e..a8a03aa 100644
--- a/cocoa/qcocoawindow.mm
+++ b/cocoa/qcocoawindow.mm
@@ -381,6 +381,7 @@ QCocoaWindow::QCocoaWindow(QWindow *tlw)
     , m_bottomContentBorderThickness(0)
     , m_normalGeometry(QRect(0,0,-1,-1))
     , m_hasWindowFilePath(false)
+    , m_windowIcon(nil)
 {
     qCDebug(lcQpaCocoaWindow) << "QCocoaWindow::QCocoaWindow" << window();
 
@@ -445,6 +446,7 @@ QCocoaWindow::~QCocoaWindow()
         child->m_parentCocoaWindow = 0;
     }
 
+    [m_windowIcon release];
     [m_view release];
     [m_nsWindow release];
     [m_windowCursor release];
@@ -896,7 +898,8 @@ void QCocoaWindow::setWindowFlags(Qt::WindowFlags flags)
         Qt::WindowType type = window()->type();
         if ((type & Qt::Popup) != Qt::Popup && (type & Qt::Dialog) != Qt::Dialog) {
             NSWindowCollectionBehavior behavior = [m_nsWindow collectionBehavior];
-            if (flags & Qt::WindowFullscreenButtonHint) {
+            // Ignore Qt::WindowFullscreenButtonHint if a "simple" and consistent fullscreen mode is requested.
+            if ((flags & Qt::WindowFullscreenButtonHint) && !qEnvironmentVariableIsSet("QT_CONSISTENT_FULLSCREEN")) {
                 behavior |= NSWindowCollectionBehaviorFullScreenPrimary;
                 behavior &= ~NSWindowCollectionBehaviorFullScreenAuxiliary;
             } else {
@@ -951,14 +954,14 @@ void QCocoaWindow::setWindowIcon(const QIcon &icon)
         [m_nsWindow setRepresentedURL:[NSURL fileURLWithPath:title]];
         iconButton = [m_nsWindow standardWindowButton:NSWindowDocumentIconButton];
     }
+    [m_windowIcon release];
     if (icon.isNull()) {
-        [iconButton setImage:nil];
+        m_windowIcon = nil;
     } else {
         QPixmap pixmap = icon.pixmap(QSize(22, 22));
-        NSImage *image = static_cast<NSImage *>(qt_mac_create_nsimage(pixmap));
-        [iconButton setImage:image];
-        [image release];
+        m_windowIcon = static_cast<NSImage *>(qt_mac_create_nsimage(pixmap));
     }
+    [iconButton setImage:m_windowIcon];
 }
 
 void QCocoaWindow::setAlertState(bool enabled)
@@ -1590,19 +1593,31 @@ void QCocoaWindow::syncWindowState(Qt::WindowState newState)
     }
 
     if ((m_synchedWindowState & Qt::WindowFullScreen) != (newState & Qt::WindowFullScreen)) {
-        if (window()->flags() & Qt::WindowFullscreenButtonHint) {
+        if (m_nsWindow.collectionBehavior & NSWindowCollectionBehaviorFullScreenPrimary) {
             if (m_effectivelyMaximized && m_synchedWindowState == Qt::WindowFullScreen)
                 predictedState = Qt::WindowMaximized;
             [m_nsWindow toggleFullScreen : m_nsWindow];
         } else {
+            // fall back to a simple, DIY fullscreen mode that has the advantage of being fast,
+            // consistent (across platforms and MissionControl settings) and bug free.
+            NSWindow *nsWin = m_view.window;
+            bool wasActive = ([NSApp keyWindow] == nsWin);
+#if QT_MACOS_PLATFORM_SDK_EQUAL_OR_ABOVE(__MAC_10_9)
+            bool menuBarsOnAllScreens = [NSScreen screensHaveSeparateSpaces];
+#else
+            bool menuBarsOnAllScreens = false;
+#endif
             if (newState & Qt::WindowFullScreen) {
                 QScreen *screen = window()->screen();
-                if (screen) {
-                    if (m_normalGeometry.width() < 0) {
-                        m_oldWindowFlags = m_windowFlags;
-                        window()->setFlags(window()->flags() | Qt::FramelessWindowHint);
-                        m_normalGeometry = nativeWindowGeometry();
-                        setGeometry(screen->geometry());
+                if (screen && m_normalGeometry.width() < 0) {
+                    m_oldWindowFlags = m_windowFlags;
+                    window()->setFlags((window()->flags() & ~Qt::WindowFullscreenButtonHint) | Qt::Window | Qt::FramelessWindowHint);
+                    m_normalGeometry = nativeWindowGeometry();
+                    setGeometry(screen->geometry());
+                    if (menuBarsOnAllScreens || [nsWin screen] == [[NSScreen screens] firstObject]) {
+                        // only auto-hide the menubar if there is one on the window's screen (idem for the Dock)
+                        // [[NSScreen screens] firstObject] returns the primary screen that has its top-left
+                        // at (0,0) as well as the menubar when screens don't have separate spaces.
                         m_presentationOptions = [NSApp presentationOptions];
                         [NSApp setPresentationOptions : m_presentationOptions | NSApplicationPresentationAutoHideMenuBar | NSApplicationPresentationAutoHideDock];
                     }
@@ -1611,7 +1626,15 @@ void QCocoaWindow::syncWindowState(Qt::WindowState newState)
                 window()->setFlags(m_oldWindowFlags);
                 setGeometry(m_normalGeometry);
                 m_normalGeometry.setRect(0, 0, -1, -1);
-                [NSApp setPresentationOptions : m_presentationOptions];
+                // restore the window icon from its cached NSImage
+                [[m_nsWindow standardWindowButton:NSWindowDocumentIconButton] setImage:m_windowIcon];
+                if (menuBarsOnAllScreens || [nsWin screen] == [[NSScreen screens] firstObject]) {
+                    [NSApp setPresentationOptions : m_presentationOptions];
+                }
+            }
+            if (wasActive) {
+                // make sure the operation doesn't cause a loss of focus
+                requestActivateWindow();
             }
         }
     }
