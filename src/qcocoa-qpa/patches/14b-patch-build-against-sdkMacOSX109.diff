diff --git a/cocoa/qcocoanativeinterface.mm b/cocoa/qcocoanativeinterface.mm
index 77065a5..bbe91bf 100644
--- a/cocoa/qcocoanativeinterface.mm
+++ b/cocoa/qcocoanativeinterface.mm
@@ -184,12 +184,14 @@ QPixmap QCocoaNativeInterface::defaultBackgroundPixmapForQWizard()
             ok = true;
         }
     } else {
+#if QT_OSX_PLATFORM_SDK_EQUAL_OR_ABOVE(__MAC_10_10)
         QCFType<CFArrayRef> urls = LSCopyApplicationURLsForBundleIdentifier(
             CFSTR("com.apple.KeyboardSetupAssistant"), nullptr);
         if (urls && CFArrayGetCount(urls) > 0) {
             url = (CFURLRef)CFArrayGetValueAtIndex(urls, 0);
             ok = true;
         }
+#endif
     }
     if (ok) {
         QCFType<CFBundleRef> bundle = CFBundleCreate(kCFAllocatorDefault, url);
diff --git a/cocoa/qcocoawindow.mm b/cocoa/qcocoawindow.mm
index 97925d3..15a2e0a 100644
--- a/cocoa/qcocoawindow.mm
+++ b/cocoa/qcocoawindow.mm
@@ -60,6 +60,12 @@
 
 #include <vector>
 
+#if QT_MACOS_PLATFORM_SDK_EQUAL_OR_ABOVE(__MAC_10_10)
+#   define NSWINPROPERTY(w,property,selector) (w).property
+#else
+#   define NSWINPROPERTY(w,property,selector) [(w) selector]
+#endif
+
 enum {
     defaultWindowWidth = 160,
     defaultWindowHeight = 160
@@ -697,7 +703,7 @@ void QCocoaWindow::show(bool becauseOfAncestor)
     if ([m_nsWindow isVisible])
         return;
 
-    if (m_view.window.parentWindow && !m_view.window.parentWindow.visible) {
+    if (m_view.window.parentWindow && !NSWINPROPERTY(m_view.window.parentWindow,visible,isVisible)) {
         m_hiddenByAncestor = true; // Parent still hidden, don't show now
     } else if ((becauseOfAncestor == m_hiddenByAncestor) // Was NEITHER explicitly hidden
                && !m_hiddenByClipping) { // ... NOR clipped
@@ -1975,11 +1981,11 @@ Qt::WindowState QCocoaWindow::windowState() const
     // FIXME: Support compound states (Qt::WindowStates)
 
     NSWindow *window = m_view.window;
-    if (window.miniaturized)
+    if (NSWINPROPERTY(window, miniaturized, isMiniaturized))
         return Qt::WindowMinimized;
     if (window.qt_fullScreen)
         return Qt::WindowFullScreen;
-    if ((window.zoomed && !isTransitioningToFullScreen())
+    if ((NSWINPROPERTY(window, zoomed, isZoomed) && !isTransitioningToFullScreen())
         || (m_lastReportedWindowState == Qt::WindowMaximized && isTransitioningToFullScreen()))
         return Qt::WindowMaximized;
 
