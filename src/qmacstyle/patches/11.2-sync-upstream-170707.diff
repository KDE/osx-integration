diff --git a/qmacstyle_mac.mm b/qmacstyle_mac.mm
index 4d7e36b..1f21ec4 100644
--- a/qmacstyle_mac.mm
+++ b/qmacstyle_mac.mm
@@ -253,7 +253,7 @@ static bool isInMacUnifiedToolbarArea(QWindow *window, int windowY)
 }
 
 
-void drawTabCloseButton(QPainter *p, bool hover, bool selected, bool pressed)
+static void drawTabCloseButton(QPainter *p, bool hover, bool selected, bool pressed, bool documentMode)
 {
     p->setRenderHints(QPainter::Antialiasing);
     QRect rect(0, 0, closeButtonSize, closeButtonSize);
@@ -264,10 +264,16 @@ void drawTabCloseButton(QPainter *p, bool hover, bool selected, bool pressed)
         // draw background circle
         QColor background;
         if (selected) {
-            background = pressed ? tabBarCloseButtonBackgroundSelectedPressed : tabBarCloseButtonBackgroundSelectedHovered;
+            if (documentMode)
+                background = pressed ? tabBarCloseButtonBackgroundSelectedPressed : tabBarCloseButtonBackgroundSelectedHovered;
+            else
+                background = QColor(255, 255, 255, pressed ? 150 : 100); // Translucent white
         } else {
             background = pressed ? tabBarCloseButtonBackgroundPressed : tabBarCloseButtonBackgroundHovered;
+            if (!documentMode)
+                background = background.lighter(pressed ? 135 : 140); // Lighter tab background, lighter color
         }
+
         p->setPen(Qt::transparent);
         p->setBrush(background);
         p->drawRoundedRect(rect, closeButtonCornerRadius, closeButtonCornerRadius);
@@ -276,7 +282,7 @@ void drawTabCloseButton(QPainter *p, bool hover, bool selected, bool pressed)
     // draw cross
     const int margin = 3;
     QPen crossPen;
-    crossPen.setColor(selected ? tabBarCloseButtonCrossSelected : tabBarCloseButtonCross);
+    crossPen.setColor(selected ? (documentMode ? tabBarCloseButtonCrossSelected : Qt::white) : tabBarCloseButtonCross);
     crossPen.setWidthF(1.1);
     crossPen.setCapStyle(Qt::FlatCap);
     p->setPen(crossPen);
@@ -2311,6 +2317,8 @@ void QMacStyle::polish(QWidget* w)
             QPalette p = w->palette();
             p.setColor(QPalette::WindowText, QColor(17, 17, 17));
             w->setPalette(p);
+            w->setAttribute(Qt::WA_SetPalette, false);
+            w->setAttribute(Qt::WA_SetFont, false);
         }
     }
 #endif
@@ -2353,6 +2361,15 @@ void QMacStyle::unpolish(QWidget* w)
     }
 #endif
 
+#ifndef QT_NO_TABBAR
+    if (QTabBar *tb = qobject_cast<QTabBar*>(w)) {
+        if (!w->testAttribute(Qt::WA_SetFont))
+            w->setFont(qApp->font(w));
+        if (!w->testAttribute(Qt::WA_SetPalette))
+            w->setPalette(qApp->palette(w));
+    }
+#endif
+
     if (QRubberBand *rubber = qobject_cast<QRubberBand*>(w)) {
         rubber->setWindowOpacity(1.0);
         rubber->setAttribute(Qt::WA_PaintOnScreen, true);
@@ -3592,12 +3609,13 @@ void QMacStyle::drawPrimitive(PrimitiveElement pe, const QStyleOption *opt, QPai
     case PE_IndicatorTabClose: {
         // Make close button visible only on the hovered tab.
         if (QTabBar *tabBar = qobject_cast<QTabBar*>(w->parentWidget())) {
+            const bool documentMode = tabBar->documentMode();
 #if QT_VERSION >= QT_VERSION_CHECK(5, 10, 0)
             // QTabBarPrivate exists but is not exported in Qt 5.9
             const QTabBarPrivate *tabBarPrivate = static_cast<QTabBarPrivate *>(QObjectPrivate::get(tabBar));
-            qWarning() << "QTBPrivate" << tabBarPrivate << "hovered:" << hoveredTabIndex;
-            if (hoveredTabIndex != -1 && ((w == tabBar->tabButton(hoveredTabIndex, QTabBar::LeftSide)) ||
-                                          (w == tabBar->tabButton(hoveredTabIndex, QTabBar::RightSide))))
+            if (!documentMode ||
+                (hoveredTabIndex != -1 && ((w == tabBar->tabButton(hoveredTabIndex, QTabBar::LeftSide)) ||
+                                           (w == tabBar->tabButton(hoveredTabIndex, QTabBar::RightSide)))))
 #else
             Q_UNUSED(tabBar);
 #endif
@@ -3605,7 +3623,7 @@ void QMacStyle::drawPrimitive(PrimitiveElement pe, const QStyleOption *opt, QPai
                 const bool hover = (opt->state & State_MouseOver);
                 const bool selected = (opt->state & State_Selected);
                 const bool pressed = (opt->state & State_Sunken);
-                drawTabCloseButton(p, hover, selected, pressed);
+                drawTabCloseButton(p, hover, selected, pressed, documentMode);
             }
         }
         } break;
