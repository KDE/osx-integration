diff --git a/qmacstyle_mac.mm b/qmacstyle_mac.mm
index ad14fd3..f742b28 100644
--- a/qmacstyle_mac.mm
+++ b/qmacstyle_mac.mm
@@ -717,7 +717,8 @@ static QSize qt_aqua_get_known_size(QStyle::ContentsType ct, const QWidget *widg
             else if (sz == QAquaSizeMini)
                 ret = QSize(-1, qt_mac_aqua_get_metric(kThemeMetricMiniPushButtonHeight));
 
-            if (!psh->icon().isNull()){
+            bool showIcon = !psh->text().isEmpty() || widg->style()->proxy()->styleHint(QCommonStyle::SH_DialogButtonBox_ButtonsHaveIcons);
+            if (showIcon && !psh->icon().isNull()) {
                 // If the button got an icon, and the icon is larger than the
                 // button, we can't decide on a default size
                 ret.setWidth(-1);
@@ -4117,8 +4118,10 @@ void QMacStyle::drawControl(ControlElement ce, const QStyleOption *opt, QPainter
             // tab. So, cheat a little here. However, if it *is* only an icon
             // the windows style works great, so just use that implementation.
             bool hasMenu = btn.features & QStyleOptionButton::HasMenu;
+            // do we have icon AND should it show?
             bool hasIcon = !btn.icon.isNull();
             bool hasText = !btn.text.isEmpty();
+            bool showIcon = hasIcon && (!hasText || proxy()->styleHint(SH_DialogButtonBox_ButtonsHaveIcons));
 
             if (!hasMenu && usingYosemiteOrLater) {
                 if (tds == kThemeStatePressed
@@ -4176,7 +4179,7 @@ void QMacStyle::drawControl(ControlElement ce, const QStyleOption *opt, QPainter
                     p->restore();
                 }
             } else {
-                if (hasIcon && !hasText) {
+                if (hasIcon && showIcon && !hasText) {
                     QCommonStyle::drawControl(ce, &btn, p, w);
                 } else {
                     QRect freeContentRect = btn.rect;
@@ -4186,7 +4189,7 @@ void QMacStyle::drawControl(ControlElement ce, const QStyleOption *opt, QPainter
                         textRect.moveTo(w ? 15 : 11, textRect.top()); // Supports Qt Quick Controls
                     }
                     // Draw the icon:
-                    if (hasIcon) {
+                    if (hasIcon && showIcon) {
                         int contentW = textRect.width();
                         if (hasMenu)
                             contentW += proxy()->pixelMetric(PM_MenuButtonIndicator) + 4;
@@ -4657,9 +4660,16 @@ void QMacStyle::drawControl(ControlElement ce, const QStyleOption *opt, QPainter
                         HIThemeDrawMenuSeparator(&hiLr, &hiLr, &mdi,
                                              cg, kHIThemeOrientationNormal);
                     }
-                    // draw the text left-aligned w.r.t. the icon location
-                    p->drawText(contentRect.x() + macItemHMargin, yPos, contentRect.width(),
+                    if (opt->direction == Qt::LeftToRight) {
+                        // draw the text left-aligned w.r.t. the icon location
+                        p->drawText(contentRect.x() + macItemHMargin, yPos, contentRect.width(),
                                 contentRect.height(), text_flags | Qt::AlignLeft, s);
+                    } else {
+                        // a bit silly to respect R2L mode when the rest of the style doesn't ... yet
+                        // but somebody's gotta make a start!
+                        p->drawText(contentRect.x() - macItemHMargin, yPos, contentRect.width(),
+                                contentRect.height(), text_flags | Qt::AlignRight, s);
+                    }
                 } else {
                     p->setFont(myFont);
                     p->drawText(xpos, yPos, contentRect.width() - xm - tabwidth + 1,
