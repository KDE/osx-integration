diff --git a/private/qtcore-config.h b/private/qtcore-config.h
index 5a9ae48bb8b62dc3f2cdf10f9cc68a08f4eaa64e..d4afd9efad313a491a35926df2dd98b7e2f6f06b 100644
--- a/private/qtcore-config.h
+++ b/private/qtcore-config.h
@@ -54,3 +54,7 @@
 #ifndef QT_FEATURE_pushbutton
 #define QT_FEATURE_pushbutton 1
 #endif
+
+#ifndef QT_FEATURE_formlayout
+#define QT_FEATURE_formlayout 1
+#endif
diff --git a/private/qcommonstyle.cpp b/private/qcommonstyle.cpp
index cdb80d7581c22eefa1686f20cf06e800e388222a..f936f46db497e0453fc3036cb9ad2cc8fe5fc220 100644
--- a/private/qcommonstyle.cpp
+++ b/private/qcommonstyle.cpp
@@ -37,6 +37,7 @@
 **
 ****************************************************************************/
 
+#include "qtcore-config.h"
 #include "qcommonstyle.h"
 #include "qcommonstyle_p.h"
 
diff --git a/private/qcombobox.cpp b/private/qcombobox.cpp
index b18066c174636fac07ebc2cc3b1d36a6b137ee0c..f26db95fa5fce11be9bd0f9af2e0605e56acb913 100644
--- a/private/qcombobox.cpp
+++ b/private/qcombobox.cpp
@@ -1793,7 +1793,9 @@ void QComboBox::setLineEdit(QLineEdit *edit)
     connect(d->lineEdit, SIGNAL(textChanged(QString)), this, SIGNAL(currentTextChanged(QString)));
     connect(d->lineEdit, SIGNAL(cursorPositionChanged(int,int)), this, SLOT(updateMicroFocus()));
     connect(d->lineEdit, SIGNAL(selectionChanged()), this, SLOT(updateMicroFocus()));
+#if QT_VERSION >= QT_VERSION_CHECK(5, 9, 0)
     connect(d->lineEdit->d_func()->control, SIGNAL(updateMicroFocus()), this, SLOT(updateMicroFocus()));
+#endif
     d->lineEdit->setFrame(false);
     d->lineEdit->setContextMenuPolicy(Qt::NoContextMenu);
     d->updateFocusPolicy();
diff --git a/qmacstyle_mac_p.h b/qmacstyle_mac_p.h
index 7296539356413d3a8b97fb0c598cd24da9730d8c..e7ac3811a7455c16e26b3a024ffdc72b77cc501d 100644
--- a/qmacstyle_mac_p.h
+++ b/qmacstyle_mac_p.h
@@ -51,6 +51,7 @@
 // We mean it.
 //
 
+#include "qtcore-config.h"
 #include <QtWidgets/private/qtwidgetsglobal_p.h>
 #include <QtWidgets/qcommonstyle.h>
 
diff --git a/qmacstyle_mac.mm b/qmacstyle_mac.mm
index 403df1f..5f8ce32 100644
--- a/qmacstyle_mac.mm
+++ b/qmacstyle_mac.mm
@@ -1003,8 +1003,13 @@ void QMacStylePrivate::drawFocusRing(QPainter *p, const QRect &targetRect, int h
             CGContextSetAlpha(ctx, 0.5); // As applied to the stroke color below
 
             [NSGraphicsContext saveGraphicsState];
+#if QT_MACOS_PLATFORM_SDK_EQUAL_OR_ABOVE(__MAC_10_11)
             [NSGraphicsContext setCurrentContext:[NSGraphicsContext graphicsContextWithCGContext:ctx
                                                                                          flipped:NO]];
+#else
+            [NSGraphicsContext setCurrentContext:[NSGraphicsContext graphicsContextWithGraphicsPort:ctx
+                                                                                         flipped:NO]];
+#endif
             CGRect focusRingRect = CGRectMake(hMargin, vMargin, size, size);
             NSBezierPath *focusRingPath;
             if (radius > 0) {
@@ -1665,7 +1670,7 @@ void QMacStylePrivate::getSliderInfo(QStyle::ComplexControl cc, const QStyleOpti
             || slider->tickPosition == QSlider::TicksBothSides;
 
     tdi->bounds = qt_hirectForQRect(slider->rect);
-    if (isScrollbar) {
+    if (isScrollbar || QSysInfo::MacintoshVersion < QSysInfo::MV_10_10) {
         tdi->min = slider->minimum;
         tdi->max = slider->maximum;
         tdi->value = slider->sliderPosition;
@@ -1977,6 +1982,7 @@ void QMacStylePrivate::drawColorlessButton(const HIRect &macRect, HIThemeButtonD
     const bool button = opt->type == QStyleOption::SO_Button;
     const bool viewItem = opt->type == QStyleOption::SO_ViewItem;
     const bool pressed = bdi->state == kThemeStatePressed;
+    const bool usingYosemiteOrLater = QSysInfo::MacintoshVersion >= QSysInfo::MV_10_10;
 
     if (button && pressed) {
         if (bdi->kind == kThemePushButton) {
@@ -2023,7 +2029,34 @@ void QMacStylePrivate::drawColorlessButton(const HIRect &macRect, HIThemeButtonD
 
         if (!combo && !button && bdi->value == kThemeButtonOff) {
             pm = activePixmap;
-        } else if ((combo && !editableCombo) || button) {
+        } else if (!usingYosemiteOrLater && (combo || button)) {
+            QImage image = activePixmap.toImage();
+
+            for (int y = 0; y < height; ++y) {
+                QRgb *scanLine = reinterpret_cast<QRgb *>(image.scanLine(y));
+
+                for (int x = 0; x < width; ++x) {
+                    QRgb &pixel = scanLine[x];
+
+                    int darkest = qRed(pixel);
+                    int mid = qGreen(pixel);
+                    int lightest = qBlue(pixel);
+
+                    if (darkest > mid)
+                        qSwap(darkest, mid);
+                    if (mid > lightest)
+                        qSwap(mid, lightest);
+                    if (darkest > mid)
+                        qSwap(darkest, mid);
+
+                    int gray = (mid + 2 * lightest) / 3;
+                    if (pressed)
+                        gray *= 0.88;
+                    pixel = qRgba(gray, gray, gray, qAlpha(pixel));
+                }
+            }
+            pm = QPixmap::fromImage(image);
+        } else if ((usingYosemiteOrLater && combo && !editableCombo) || button) {
             QCocoaWidget cw = cocoaWidgetFromHIThemeButtonKind(bdi->kind);
             NSButton *bc = (NSButton *)cocoaControl(cw);
             [bc highlight:pressed];
@@ -2037,7 +2070,7 @@ void QMacStylePrivate::drawColorlessButton(const HIRect &macRect, HIThemeButtonD
                 rect.adjust(0, 0, -5, 0);
             drawNSViewInRect(cw, bc, rect, p);
             return;
-        } else if (editableCombo || viewItem) {
+        } else if (usingYosemiteOrLater && (editableCombo || viewItem)) {
             QImage image = activePixmap.toImage();
 
             for (int y = 0; y < height; ++y) {
@@ -3540,10 +3573,13 @@ void QMacStyle::drawPrimitive(PrimitiveElement pe, const QStyleOption *opt, QPai
     case PE_IndicatorTabClose: {
         // Make close button visible only on the hovered tab.
         if (QTabBar *tabBar = qobject_cast<QTabBar*>(w->parentWidget())) {
+#if QT_VERSION >= QT_VERSION_CHECK(5, 9, 0)
             const QTabBarPrivate *tabBarPrivate = static_cast<QTabBarPrivate *>(QObjectPrivate::get(tabBar));
             const int hoveredTabIndex = tabBarPrivate->hoveredTabIndex();
             if (hoveredTabIndex != -1 && ((w == tabBar->tabButton(hoveredTabIndex, QTabBar::LeftSide)) ||
-                                          (w == tabBar->tabButton(hoveredTabIndex, QTabBar::RightSide)))) {
+                                          (w == tabBar->tabButton(hoveredTabIndex, QTabBar::RightSide))))
+#endif
+            {
                 const bool hover = (opt->state & State_MouseOver);
                 const bool selected = (opt->state & State_Selected);
                 const bool pressed = (opt->state & State_Sunken);
@@ -3614,6 +3650,7 @@ void QMacStyle::drawControl(ControlElement ce, const QStyleOption *opt, QPainter
     QWindow *window = w && w->window() ? w->window()->windowHandle() :
                      QStyleHelper::styleObjectWindow(opt->styleObject);
     const_cast<QMacStylePrivate *>(d)->resolveCurrentNSView(window);
+    const bool usingYosemiteOrLater = QSysInfo::MacintoshVersion >= QSysInfo::MV_10_10;
     switch (ce) {
     case CE_HeaderSection:
         if (const QStyleOptionHeader *header = qstyleoption_cast<const QStyleOptionHeader *>(opt)) {
@@ -3834,7 +3871,10 @@ void QMacStyle::drawControl(ControlElement ce, const QStyleOption *opt, QPainter
             // takes precedence over a normal default button
             if (btn->features & QStyleOptionButton::AutoDefaultButton
                     && opt->state & State_Active && opt->state & State_HasFocus) {
-                d->autoDefaultButton = opt->styleObject;
+                if (usingYosemiteOrLater)
+                    d->autoDefaultButton = opt->styleObject;
+                else
+                    d->setAutoDefaultButton(opt->styleObject);
             } else if (d->autoDefaultButton == opt->styleObject) {
                 d->setAutoDefaultButton(0);
             }
@@ -3842,6 +3882,8 @@ void QMacStyle::drawControl(ControlElement ce, const QStyleOption *opt, QPainter
             if (!d->autoDefaultButton) {
                 if (btn->features & QStyleOptionButton::DefaultButton && opt->state & State_Active) {
                     d->defaultButton = opt->styleObject;
+                    if (!usingYosemiteOrLater && !d->animation(opt->styleObject))
+                        d->startAnimation(new QStyleAnimation(opt->styleObject));
                 } else if (d->defaultButton == opt->styleObject) {
                     if (QStyleAnimation *animation = d->animation(opt->styleObject)) {
                         animation->updateTarget();
@@ -3863,18 +3905,42 @@ void QMacStyle::drawControl(ControlElement ce, const QStyleOption *opt, QPainter
             HIThemeButtonDrawInfo bdi;
             d->initHIThemePushButton(btn, w, tds, &bdi);
 
-            if (!hasMenu) {
-                // HITheme is not drawing a nice focus frame around buttons.
-                // We'll do it ourselves further down.
-                bdi.adornment &= ~kThemeAdornmentFocus;
-
-                // We can't rely on an animation existing to test for the default look. That means a bit
-                // more logic (notice that the logic is slightly different for the bevel and the label).
-                if (tds == kThemeStateActive
-                    && (btn->features & QStyleOptionButton::DefaultButton
-                        || (btn->features & QStyleOptionButton::AutoDefaultButton
-                            && d->autoDefaultButton == btn->styleObject)))
-                    bdi.adornment |= kThemeAdornmentDefault;
+            if (usingYosemiteOrLater) {
+                if (!hasMenu) {
+                    // HITheme is not drawing a nice focus frame around buttons.
+                    // We'll do it ourselves further down.
+                    bdi.adornment &= ~kThemeAdornmentFocus;
+
+                    // We can't rely on an animation existing to test for the default look. That means a bit
+                    // more logic (notice that the logic is slightly different for the bevel and the label).
+                    if (tds == kThemeStateActive
+                        && (btn->features & QStyleOptionButton::DefaultButton
+                            || (btn->features & QStyleOptionButton::AutoDefaultButton
+                                && d->autoDefaultButton == btn->styleObject)))
+                        bdi.adornment |= kThemeAdornmentDefault;
+                }
+            } else {
+                // the default button animation is paused meanwhile any button
+                // is pressed or an auto-default button is animated instead
+                if (QStyleAnimation *defaultAnimation = d->animation(d->defaultButton)) {
+                    if (d->pressedButton || d->autoDefaultButton) {
+                        if (defaultAnimation->state() == QStyleAnimation::Running) {
+                            defaultAnimation->pause();
+                            defaultAnimation->updateTarget();
+                        }
+                    } else if (defaultAnimation->state() == QStyleAnimation::Paused) {
+                        defaultAnimation->resume();
+                    }
+                }
+
+                if (!d->pressedButton) {
+                    QStyleAnimation* animation = d->animation(opt->styleObject);
+                    if (animation && animation->state() == QStyleAnimation::Running) {
+                        bdi.adornment |= kThemeAdornmentDefault;
+                        bdi.animation.time.start = d->defaultButtonStart;
+                        bdi.animation.time.current = CFAbsoluteTimeGetCurrent();
+                    }
+                }
             }
 
             // Unlike Carbon, we want the button to always be drawn inside its bounds.
@@ -3892,7 +3958,7 @@ void QMacStyle::drawControl(ControlElement ce, const QStyleOption *opt, QPainter
                 newRect.size.width -= QMacStylePrivate::PushButtonRightOffset - 4;
             }
 
-            if (hasMenu && bdi.kind != kThemeBevelButton) {
+            if (hasMenu && usingYosemiteOrLater && bdi.kind != kThemeBevelButton) {
                 QCocoaWidget cw = cocoaWidgetFromHIThemeButtonKind(bdi.kind);
                 cw.first = QCocoaPullDownButton;
                 NSPopUpButton *pdb = (NSPopUpButton *)d->cocoaControl(cw);
@@ -3906,7 +3972,7 @@ void QMacStyle::drawControl(ControlElement ce, const QStyleOption *opt, QPainter
             else
                 HIThemeDrawButton(&newRect, &bdi, cg, kHIThemeOrientationNormal, 0);
 
-            if (btn->state & State_HasFocus) {
+            if (usingYosemiteOrLater && btn->state & State_HasFocus) {
                 CGRect focusRect = newRect;
                 if (bdi.kind == kThemePushButton)
                     focusRect.size.height += 1; // Another thing HITheme and Cocoa seem to disagree about.
@@ -3936,7 +4002,7 @@ void QMacStyle::drawControl(ControlElement ce, const QStyleOption *opt, QPainter
                 d->drawFocusRing(p, focusTargetRect.adjusted(-hMargin, -vMargin, hMargin, vMargin), hMargin, vMargin, radius);
             }
 
-            if (hasMenu && bdi.kind == kThemeBevelButton) {
+            if (hasMenu && (!usingYosemiteOrLater || bdi.kind == kThemeBevelButton)) {
                 int mbi = proxy()->pixelMetric(QStyle::PM_MenuButtonIndicator, btn, w);
                 QRect ir = btn->rect;
                 int arrowXOffset = bdi.kind == kThemePushButton ? 6 :
@@ -3977,7 +4043,7 @@ void QMacStyle::drawControl(ControlElement ce, const QStyleOption *opt, QPainter
             bool hasIcon = !btn.icon.isNull();
             bool hasText = !btn.text.isEmpty();
 
-            if (!hasMenu) {
+            if (!hasMenu && usingYosemiteOrLater) {
                 if (tds == kThemeStatePressed
                     || (tds == kThemeStateActive
                         && ((btn.features & QStyleOptionButton::DefaultButton && !d->autoDefaultButton)
@@ -4081,6 +4147,10 @@ void QMacStyle::drawControl(ControlElement ce, const QStyleOption *opt, QPainter
         if (const QStyleOptionComboBox *cb = qstyleoption_cast<const QStyleOptionComboBox *>(opt)) {
             QStyleOptionComboBox comboCopy = *cb;
             comboCopy.direction = Qt::LeftToRight;
+            if (opt->state & QStyle::State_Small)
+                comboCopy.rect.translate(0, w ? 0 : (usingYosemiteOrLater ? 0 : -2)); // Supports Qt Quick Controls
+            else if (QSysInfo::MacintoshVersion == QSysInfo::MV_10_9)
+                comboCopy.rect.translate(0, 1);
             QCommonStyle::drawControl(CE_ComboBoxLabel, &comboCopy, p, w);
         }
         break;
@@ -4144,6 +4214,12 @@ void QMacStyle::drawControl(ControlElement ce, const QStyleOption *opt, QPainter
                 tdi.adornment = kHIThemeTabAdornmentNone;
             tdi.kind = kHIThemeTabKindNormal;
 
+            if (!usingYosemiteOrLater) {
+                if (!verticalTabs)
+                    tabRect.setY(tabRect.y() - 1);
+                else
+                    tabRect.setX(tabRect.x() - 1);
+            }
             QStyleOptionTab::TabPosition tp = tabOpt->position;
             QStyleOptionTab::SelectedPosition sp = tabOpt->selectedPosition;
             if (tabOpt->direction == Qt::RightToLeft && !verticalTabs) {
@@ -4627,7 +4703,7 @@ void QMacStyle::drawControl(ControlElement ce, const QStyleOption *opt, QPainter
             tdi.value = pb->progress;
             tdi.attributes = vertical ? 0 : kThemeTrackHorizontal;
 
-            if (isIndeterminate) {
+            if (isIndeterminate || (tdi.value < tdi.max && !usingYosemiteOrLater)) {
                 if (QProgressStyleAnimation *animation = qobject_cast<QProgressStyleAnimation*>(d->animation(opt->styleObject)))
                     tdi.trackInfo.progress.phase = animation->animationStep();
                 else if (opt->styleObject)
@@ -5326,6 +5402,7 @@ void QMacStyle::drawComplexControl(ComplexControl cc, const QStyleOptionComplex
     QWindow *window = widget && widget->window() ? widget->window()->windowHandle() :
                      QStyleHelper::styleObjectWindow(opt->styleObject);
     const_cast<QMacStylePrivate *>(d)->resolveCurrentNSView(window);
+    const bool usingYosemiteOrLater = QSysInfo::MacintoshVersion >= QSysInfo::MV_10_10;
     switch (cc) {
     case CC_Slider:
     case CC_ScrollBar:
@@ -5570,7 +5647,7 @@ void QMacStyle::drawComplexControl(ComplexControl cc, const QStyleOptionComplex
             } else {
                 d->stopAnimation(opt->styleObject);
 
-                if (cc == CC_Slider) {
+                if (usingYosemiteOrLater && cc == CC_Slider) {
                     // Fix min and max positions. (See also getSliderInfo()
                     // for the slider values adjustments.)
                     // HITheme seems to have forgotten how to render
@@ -5779,11 +5856,11 @@ void QMacStyle::drawComplexControl(ComplexControl cc, const QStyleOptionComplex
             HIThemeButtonDrawInfo bdi;
             d->initComboboxBdi(combo, &bdi, widget, tds);
             HIRect rect = qt_hirectForQRect(combo->rect);
-            if (combo->editable)
+            if (combo->editable && usingYosemiteOrLater)
                 rect.origin.y += tds == kThemeStateInactive ? 1 : 2;
             if (tds != kThemeStateInactive)
                 QMacStylePrivate::drawCombobox(rect, bdi, p);
-            else if (!widget && combo->editable) {
+            else if (!widget && combo->editable && usingYosemiteOrLater) {
                 QCocoaWidget cw = cocoaWidgetFromHIThemeButtonKind(bdi.kind);
                 NSView *cb = d->cocoaControl(cw);
                 QRect r = combo->rect.adjusted(3, 0, 0, 0);
@@ -6321,8 +6398,8 @@ QRect QMacStyle::subControlRect(ComplexControl cc, const QStyleOptionComplex *op
             switch (sc) {
             case SC_ComboBoxEditField:{
                 ret = QMacStylePrivate::comboboxEditBounds(combo->rect, bdi);
-                // 10.10 and above need a slight shift
-                ret.setHeight(ret.height() - 1);
+                if (QSysInfo::MacintoshVersion >= QSysInfo::MV_10_10)
+                    ret.setHeight(ret.height() - 1);
                 break; }
             case SC_ComboBoxArrow:{
                 ret = QMacStylePrivate::comboboxEditBounds(combo->rect, bdi);
@@ -6787,7 +6864,7 @@ QSize QMacStyle::sizeFromContents(ContentsType ct, const QStyleOption *opt,
     case CT_ComboBox: {
         sz.rwidth() += 50;
         const QStyleOptionComboBox *cb = qstyleoption_cast<const QStyleOptionComboBox *>(opt);
-        if (cb && !cb->editable)
+        if (QSysInfo::MacintoshVersion < QSysInfo::MV_10_10 || (cb && !cb->editable))
             sz.rheight() += 2;
         break;
     }
