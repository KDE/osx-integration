diff --git a/private/private.pri b/private/private.pri
index f167a2f..e91f618 100644
--- a/private/private.pri
+++ b/private/private.pri
@@ -12,4 +12,6 @@ SOURCES += \
     $$PWD/qcombobox.cpp \
     $$PWD/qcommonstyle.cpp \
     $$PWD/qstyleanimation.cpp \
-    $$PWD/qstylehelper.cpp
+    $$PWD/qstylehelper.cpp \
+    $$PWD/qoperatingsystemversion.cpp \
+    $$PWD/qoperatingsystemversion_darwin.mm
diff --git a/private/qcombobox.cpp b/private/qcombobox.cpp
index f26db95..2bb1d30 100644
--- a/private/qcombobox.cpp
+++ b/private/qcombobox.cpp
@@ -900,6 +900,8 @@ QComboBox::QComboBox(QComboBoxPrivate &dd, QWidget *parent)
     \ingroup basicwidgets
     \inmodule QtWidgets
 
+    \image windows-combobox.png
+
     A QComboBox provides a means of presenting a list of options to the user
     in a way that takes up the minimum amount of screen space.
 
@@ -960,8 +962,6 @@ QComboBox::QComboBox(QComboBoxPrivate &dd, QWidget *parent)
     of the view(), e.g., by using
     \l{QAbstractItemView::}{setSelectionMode()}.
 
-    \image qstyle-comboboxes.png Comboboxes in the different built-in styles.
-
     \sa QLineEdit, QSpinBox, QRadioButton, QButtonGroup,
         {fowler}{GUI Design Handbook: Combo Box, Drop-Down List Box}
 */
@@ -2748,6 +2748,22 @@ void QComboBox::showPopup()
 
     bool startTimer = !container->isVisible();
     container->raise();
+    container->create();
+    QWindow *containerWindow = container->window()->windowHandle();
+    if (containerWindow) {
+        QWindow *win = window()->windowHandle();
+        if (win) {
+            QScreen *currentScreen = win->screen();
+            if (currentScreen && !currentScreen->virtualSiblings().contains(containerWindow->screen())) {
+                containerWindow->setScreen(currentScreen);
+
+                // This seems to workaround an issue in xcb+multi GPU+multiscreen
+                // environment where the window might not always show up when screen
+                // is changed.
+                container->hide();
+            }
+        }
+    }
     container->show();
     container->updateScrollers();
     view()->setFocus();
diff --git a/private/qcommonstyle.cpp b/private/qcommonstyle.cpp
index f936f46..8b569c3 100644
--- a/private/qcommonstyle.cpp
+++ b/private/qcommonstyle.cpp
@@ -417,6 +417,8 @@ void QCommonStyle::drawPrimitive(PrimitiveElement pe, const QStyleOption *opt, Q
         proxy()->drawItemPixmap(p, opt->rect, Qt::AlignCenter, pixmap);
         break;
     }
+#else
+    Q_UNUSED(d);
 #endif // QT_NO_TABBAR
     case PE_FrameTabWidget:
     case PE_FrameWindow:
@@ -2316,6 +2318,9 @@ void QCommonStyle::drawControl(ControlElement element, const QStyleOption *opt,
     default:
         break;
     }
+#if !QT_CONFIG(tabbar) && !QT_CONFIG(itemviews)
+    Q_UNUSED(d);
+#endif
 }
 
 /*!
@@ -3015,6 +3020,7 @@ QRect QCommonStyle::subElementRect(SubElement sr, const QStyleOption *opt,
             r = subElementRect(SE_CheckBoxIndicator, opt, widget);
             break;
         }
+        Q_FALLTHROUGH();
     case SE_ItemViewItemDecoration:
     case SE_ItemViewItemText:
     case SE_ItemViewItemFocusRect:
@@ -3059,6 +3065,9 @@ QRect QCommonStyle::subElementRect(SubElement sr, const QStyleOption *opt,
         break;
     }
     return r;
+#if !QT_CONFIG(tabwidget) && !QT_CONFIG(itemviews)
+    Q_UNUSED(d);
+#endif
 }
 
 #ifndef QT_NO_DIAL
@@ -4187,11 +4196,13 @@ QRect QCommonStyle::subControlRect(ComplexControl cc, const QStyleOptionComplex
             case SC_TitleBarContextHelpButton:
                 if (tb->titleBarFlags & Qt::WindowContextHelpButtonHint)
                     offset += delta;
+                Q_FALLTHROUGH();
             case SC_TitleBarMinButton:
                 if (!isMinimized && (tb->titleBarFlags & Qt::WindowMinimizeButtonHint))
                     offset += delta;
                 else if (sc == SC_TitleBarMinButton)
                     break;
+                Q_FALLTHROUGH();
             case SC_TitleBarNormalButton:
                 if (isMinimized && (tb->titleBarFlags & Qt::WindowMinimizeButtonHint))
                     offset += delta;
@@ -4199,21 +4210,25 @@ QRect QCommonStyle::subControlRect(ComplexControl cc, const QStyleOptionComplex
                     offset += delta;
                 else if (sc == SC_TitleBarNormalButton)
                     break;
+                Q_FALLTHROUGH();
             case SC_TitleBarMaxButton:
                 if (!isMaximized && (tb->titleBarFlags & Qt::WindowMaximizeButtonHint))
                     offset += delta;
                 else if (sc == SC_TitleBarMaxButton)
                     break;
+                Q_FALLTHROUGH();
             case SC_TitleBarShadeButton:
                 if (!isMinimized && (tb->titleBarFlags & Qt::WindowShadeButtonHint))
                     offset += delta;
                 else if (sc == SC_TitleBarShadeButton)
                     break;
+                Q_FALLTHROUGH();
             case SC_TitleBarUnshadeButton:
                 if (isMinimized && (tb->titleBarFlags & Qt::WindowShadeButtonHint))
                     offset += delta;
                 else if (sc == SC_TitleBarUnshadeButton)
                     break;
+                Q_FALLTHROUGH();
             case SC_TitleBarCloseButton:
                 if (tb->titleBarFlags & Qt::WindowSystemMenuHint)
                     offset += delta;
@@ -4358,6 +4373,9 @@ QRect QCommonStyle::subControlRect(ComplexControl cc, const QStyleOptionComplex
      default:
         qWarning("QCommonStyle::subControlRect: Case %d not handled", cc);
     }
+#if !QT_CONFIG(slider) && !QT_CONFIG(spinbox) && !QT_CONFIG(toolbutton) && !QT_CONFIG(groupbox)
+    Q_UNUSED(widget);
+#endif
     return ret;
 }
 
@@ -5276,6 +5294,7 @@ static inline QString clearText16IconPath()
 }
 #endif // !QT_NO_IMAGEFORMAT_PNG
 
+#if defined(Q_OS_WIN) || QT_CONFIG(imageformat_png)
 static QIcon clearTextIcon(bool rtl)
 {
     const QString directionalThemeName = rtl
@@ -5299,6 +5318,7 @@ static QIcon clearTextIcon(bool rtl)
 #endif // !QT_NO_IMAGEFORMAT_PNG
     return icon;
 }
+#endif
 
 /*! \reimp */
 QPixmap QCommonStyle::standardPixmap(StandardPixmap sp, const QStyleOption *option,
@@ -5643,6 +5663,9 @@ QPixmap QCommonStyle::standardPixmap(StandardPixmap sp, const QStyleOption *opti
     }
 #endif //QT_NO_IMAGEFORMAT_XPM
 
+#if !QT_CONFIG(imageformat_png) && !QT_CONFIG(imageformat_xpm) && !QT_CONFIG(imageformat_png)
+    Q_UNUSED(rtl);
+#endif
 
     return QPixmap();
 }
diff --git a/private/qoperatingsystemversion.cpp b/private/qoperatingsystemversion.cpp
new file mode 100644
index 0000000..bed08f0
--- /dev/null
+++ b/private/qoperatingsystemversion.cpp
@@ -0,0 +1,491 @@
+/****************************************************************************
+**
+** Copyright (C) 2016 The Qt Company Ltd.
+** Contact: https://www.qt.io/licensing/
+**
+** This file is part of the QtCore module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see https://www.qt.io/terms-conditions. For further
+** information use the contact form at https://www.qt.io/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 3 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL3 included in the
+** packaging of this file. Please review the following information to
+** ensure the GNU Lesser General Public License version 3 requirements
+** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 2.0 or (at your option) the GNU General
+** Public license version 3 or any later version approved by the KDE Free
+** Qt Foundation. The licenses are as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
+** included in the packaging of this file. Please review the following
+** information to ensure the GNU General Public License requirements will
+** be met: https://www.gnu.org/licenses/gpl-2.0.html and
+** https://www.gnu.org/licenses/gpl-3.0.html.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include "qoperatingsystemversion.h"
+#if !defined(Q_OS_DARWIN) && !defined(Q_OS_WIN)
+#include "qoperatingsystemversion_p.h"
+#endif
+
+#include <qversionnumber.h>
+
+#if defined(Q_OS_ANDROID)
+#include <private/qjni_p.h>
+#endif
+
+QT_BEGIN_NAMESPACE
+
+/*!
+    \class QOperatingSystemVersion
+    \inmodule QtCore
+    \since 5.9
+    \brief The QOperatingSystemVersion class provides information about the
+    operating system version.
+
+    Unlike other version functions in QSysInfo, QOperatingSystemVersion provides
+    access to the full version number that \a developers typically use to vary
+    behavior or determine whether to enable APIs or features based on the
+    operating system version (as opposed to the kernel version number or
+    marketing version).
+
+    This class is also a complete replacement for QSysInfo::macVersion and
+    QSysInfo::windowsVersion, additionally providing access to the third (micro)
+    version number component.
+
+    Presently, Android, Apple Platforms (iOS, macOS, tvOS, and watchOS),
+    and Windows are supported.
+
+    The \a majorVersion(), \a minorVersion(), and \a microVersion() functions
+    return the parts of the operating system version number based on:
+
+    \table
+        \header
+            \li Platforms
+            \li Value
+        \row
+            \li Android
+            \li result of parsing
+                \l{https://developer.android.com/reference/android/os/Build.VERSION.html#RELEASE}{android.os.Build.VERSION.RELEASE}
+                using QVersionNumber, with a fallback to
+                \l{https://developer.android.com/reference/android/os/Build.VERSION.html#SDK_INT}{android.os.Build.VERSION.SDK_INT}
+                to determine the major and minor version component if the former
+                fails
+        \row
+            \li Apple Platforms
+            \li majorVersion, minorVersion, and patchVersion from
+                \l{https://developer.apple.com/reference/foundation/nsprocessinfo/1410906-operatingsystemversion?language=objc}{NSProcessInfo.operatingSystemVersion}
+        \row
+            \li Windows
+            \li dwMajorVersion, dwMinorVersion, and dwBuildNumber from
+                \l{https://msdn.microsoft.com/en-us/library/mt723418.aspx}{RtlGetVersion} -
+                note that this function ALWAYS return the version number of the
+                underlying operating system, as opposed to the shim underneath
+                GetVersionEx that hides the real version number if the
+                application is not manifested for that version of the OS
+    \endtable
+
+    Because QOperatingSystemVersion stores both a version number and an OS type, the OS type
+    can be taken into account when performing comparisons. For example, on a macOS system running
+    macOS Sierra (v10.12), the following expression will return \c false even though the
+    major version number component of the object on the left hand side of the expression (10) is
+    greater than that of the object on the right (9):
+
+    \code
+    QOperatingSystemVersion::current() >= QOperatingSystemVersion(QOperatingSystemVersion::IOS, 9)
+    \endcode
+
+    This allows expressions for multiple operating systems to be joined with a logical OR operator
+    and still work as expected. For example:
+
+    \code
+    auto current = QOperatingSystemVersion::current();
+    if (current >= QOperatingSystemVersion::OSXYosemite ||
+        current >= QOperatingSystemVersion(QOperatingSystemVersion::IOS, 8)) {
+        // returns true on macOS >= 10.10 and iOS >= 8.0, but false on macOS < 10.10 and iOS < 8.0
+    }
+    \endcode
+
+    A more naive comparison algorithm might incorrectly return true on all versions of macOS,
+    including Mac OS 9. This behavior is achieved by overloading the comparison operators to return
+    \c false whenever the OS types of the QOperatingSystemVersion instances being compared do not
+    match. Be aware that due to this it can be the case \c x >= y and \c x < y are BOTH \c false
+    for the same instances of \c x and \c y.
+*/
+
+/*!
+    \enum QOperatingSystemVersion::OSType
+
+    This enum provides symbolic names for the various operating
+    system families supported by QOperatingSystemVersion.
+
+    \value Android      The Google Android operating system.
+    \value IOS          The Apple iOS operating system.
+    \value MacOS        The Apple macOS operating system.
+    \value TvOS         The Apple tvOS operating system.
+    \value WatchOS      The Apple watchOS operating system.
+    \value Windows      The Microsoft Windows operating system.
+
+    \value Unknown      An unknown or unsupported operating system.
+*/
+
+/*!
+    \fn QOperatingSystemVersion::QOperatingSystemVersion(OSType osType, int vmajor, int vminor = -1, int vmicro = -1)
+
+    Constructs a QOperatingSystemVersion consisting of the OS type \a osType, and
+    major, minor, and micro version numbers \a vmajor, \a vminor and \a vmicro, respectively.
+*/
+
+/*!
+    \fn QOperatingSystemVersion QOperatingSystemVersion::current()
+
+    Returns a QOperatingSystemVersion indicating the current OS and its version number.
+*/
+#if !defined(Q_OS_DARWIN) && !defined(Q_OS_WIN)
+QOperatingSystemVersion QOperatingSystemVersion::current()
+{
+    QOperatingSystemVersion version;
+    version.m_os = currentType();
+#if defined(Q_OS_ANDROID)
+#ifndef QT_BOOTSTRAPPED
+    const QVersionNumber v = QVersionNumber::fromString(QJNIObjectPrivate::getStaticObjectField(
+        "android/os/Build$VERSION", "RELEASE", "Ljava/lang/String;").toString());
+    if (!v.isNull()) {
+        version.m_major = v.majorVersion();
+        version.m_minor = v.minorVersion();
+        version.m_micro = v.microVersion();
+        return version;
+    }
+#endif
+
+    version.m_major = -1;
+    version.m_minor = -1;
+
+    static const int versions[][2] = {
+        { 1, 0 }, // API level 1
+        { 1, 1 }, // API level 2
+        { 1, 5 }, // API level 3
+        { 1, 6 }, // API level 4
+        { 2, 0 }, // API level 5
+        { 2, 0 }, // API level 6
+        { 2, 1 }, // API level 7
+        { 2, 2 }, // API level 8
+        { 2, 3 }, // API level 9
+        { 2, 3 }, // API level 10
+        { 3, 0 }, // API level 11
+        { 3, 1 }, // API level 12
+        { 3, 2 }, // API level 13
+        { 4, 0 }, // API level 14
+        { 4, 0 }, // API level 15
+        { 4, 1 }, // API level 16
+        { 4, 2 }, // API level 17
+        { 4, 3 }, // API level 18
+        { 4, 4 }, // API level 19
+        { 4, 4 }, // API level 20
+        { 5, 0 }, // API level 21
+        { 5, 1 }, // API level 22
+        { 6, 0 }, // API level 23
+        { 7, 0 }, // API level 24
+        { 7, 1 }, // API level 25
+    };
+
+    // This will give us at least the first 2 version components
+    const size_t versionIdx = size_t(QJNIObjectPrivate::getStaticField<jint>(
+        "android/os/Build$VERSION", "SDK_INT")) - 1;
+    if (versionIdx < sizeof(versions) / sizeof(versions[0])) {
+        version.m_major = versions[versionIdx][0];
+        version.m_minor = versions[versionIdx][1];
+    }
+
+    // API level 6 was exactly version 2.0.1
+    version.m_micro = versionIdx == 5 ? 1 : -1;
+#else
+    version.m_major = -1;
+    version.m_minor = -1;
+    version.m_micro = -1;
+#endif
+    return version;
+}
+#endif
+
+static inline int compareVersionComponents(int lhs, int rhs)
+{
+    return lhs >= 0 && rhs >= 0 ? lhs - rhs : 0;
+}
+
+int QOperatingSystemVersion::compare(const QOperatingSystemVersion &v1,
+                                     const QOperatingSystemVersion &v2)
+{
+    if (v1.m_major == v2.m_major) {
+        if (v1.m_minor == v2.m_minor) {
+            return compareVersionComponents(v1.m_micro, v2.m_micro);
+        }
+        return compareVersionComponents(v1.m_minor, v2.m_minor);
+    }
+    return compareVersionComponents(v1.m_major, v2.m_major);
+}
+
+/*!
+    \fn int QOperatingSystemVersion::majorVersion() const
+
+    Returns the major version number, that is, the first segment of the
+    operating system's version number.
+
+    See the main class documentation for what the major version number is on a given
+    operating system.
+
+    -1 indicates an unknown or absent version number component.
+
+    \sa minorVersion(), microVersion()
+*/
+
+/*!
+    \fn int QOperatingSystemVersion::minorVersion() const
+
+    Returns the minor version number, that is, the second segment of the
+    operating system's version number.
+
+    See the main class documentation for what the minor version number is on a given
+    operating system.
+
+    -1 indicates an unknown or absent version number component.
+
+    \sa majorVersion(), microVersion()
+*/
+
+/*!
+    \fn int QOperatingSystemVersion::microVersion() const
+
+    Returns the micro version number, that is, the third segment of the
+    operating system's version number.
+
+    See the main class documentation for what the micro version number is on a given
+    operating system.
+
+    -1 indicates an unknown or absent version number component.
+
+    \sa majorVersion(), minorVersion()
+*/
+
+/*!
+    \fn int QOperatingSystemVersion::segmentCount() const
+
+    Returns the number of integers stored in the version number.
+*/
+
+/*!
+    \fn QOperatingSystemVersion::OSType QOperatingSystemVersion::type() const
+
+    Returns the OS type identified by the QOperatingSystemVersion.
+
+    \sa name()
+*/
+
+/*!
+    \fn QString QOperatingSystemVersion::name() const
+
+    Returns a string representation of the OS type identified by the QOperatingSystemVersion.
+
+    \sa type()
+*/
+QString QOperatingSystemVersion::name() const
+{
+    switch (type()) {
+    case QOperatingSystemVersion::Windows:
+        return QStringLiteral("Windows");
+    case QOperatingSystemVersion::MacOS: {
+        if (majorVersion() < 10)
+            return QStringLiteral("Mac OS");
+        if (majorVersion() == 10 && minorVersion() < 8)
+            return QStringLiteral("Mac OS X");
+        if (majorVersion() == 10 && minorVersion() < 12)
+            return QStringLiteral("OS X");
+        return QStringLiteral("macOS");
+    }
+    case QOperatingSystemVersion::IOS: {
+        if (majorVersion() < 4)
+            return QStringLiteral("iPhone OS");
+        return QStringLiteral("iOS");
+    }
+    case QOperatingSystemVersion::TvOS:
+        return QStringLiteral("tvOS");
+    case QOperatingSystemVersion::WatchOS:
+        return QStringLiteral("watchOS");
+    case QOperatingSystemVersion::Android:
+        return QStringLiteral("Android");
+    case QOperatingSystemVersion::Unknown:
+    default:
+        return QString();
+    }
+}
+
+/*!
+    \fn bool QOperatingSystemVersion::isAnyOfType(std::initializer_list<OSType> types) const
+
+    Returns whether the OS type identified by the QOperatingSystemVersion
+    matches any of the OS types in \a types.
+*/
+bool QOperatingSystemVersion::isAnyOfType(std::initializer_list<OSType> types) const
+{
+    for (const auto &t : qAsConst(types)) {
+        if (type() == t)
+            return true;
+    }
+    return false;
+}
+
+/*!
+    \variable QOperatingSystemVersion::Windows7
+    \brief a version corresponding to Windows 7 (version 6.1).
+    \since 5.9
+ */
+const QOperatingSystemVersion QOperatingSystemVersion::Windows7 =
+    QOperatingSystemVersion(QOperatingSystemVersion::Windows, 6, 1);
+
+/*!
+    \variable QOperatingSystemVersion::Windows8
+    \brief a version corresponding to Windows 8 (version 6.2).
+    \since 5.9
+ */
+const QOperatingSystemVersion QOperatingSystemVersion::Windows8 =
+    QOperatingSystemVersion(QOperatingSystemVersion::Windows, 6, 2);
+
+/*!
+    \variable QOperatingSystemVersion::Windows8_1
+    \brief a version corresponding to Windows 8.1 (version 6.3).
+    \since 5.9
+ */
+const QOperatingSystemVersion QOperatingSystemVersion::Windows8_1 =
+    QOperatingSystemVersion(QOperatingSystemVersion::Windows, 6, 3);
+
+/*!
+    \variable QOperatingSystemVersion::Windows10
+    \brief a version corresponding to Windows 10 (version 10.0).
+    \since 5.9
+ */
+const QOperatingSystemVersion QOperatingSystemVersion::Windows10 =
+    QOperatingSystemVersion(QOperatingSystemVersion::Windows, 10);
+
+/*!
+    \variable QOperatingSystemVersion::OSXMavericks
+    \brief a version corresponding to OS X Mavericks (version 10.9).
+    \since 5.9
+ */
+const QOperatingSystemVersion QOperatingSystemVersion::OSXMavericks =
+    QOperatingSystemVersion(QOperatingSystemVersion::MacOS, 10, 9);
+
+/*!
+    \variable QOperatingSystemVersion::OSXYosemite
+    \brief a version corresponding to OS X Yosemite (version 10.10).
+    \since 5.9
+ */
+const QOperatingSystemVersion QOperatingSystemVersion::OSXYosemite =
+    QOperatingSystemVersion(QOperatingSystemVersion::MacOS, 10, 10);
+
+/*!
+    \variable QOperatingSystemVersion::OSXElCapitan
+    \brief a version corresponding to OS X El Capitan (version 10.11).
+    \since 5.9
+ */
+const QOperatingSystemVersion QOperatingSystemVersion::OSXElCapitan =
+    QOperatingSystemVersion(QOperatingSystemVersion::MacOS, 10, 11);
+
+/*!
+    \variable QOperatingSystemVersion::MacOSSierra
+    \brief a version corresponding to macOS Sierra (version 10.12).
+    \since 5.9
+ */
+const QOperatingSystemVersion QOperatingSystemVersion::MacOSSierra =
+    QOperatingSystemVersion(QOperatingSystemVersion::MacOS, 10, 12);
+
+/*!
+    \variable QOperatingSystemVersion::AndroidJellyBean
+    \brief a version corresponding to Android Jelly Bean (version 4.1, API level 16).
+    \since 5.9
+ */
+const QOperatingSystemVersion QOperatingSystemVersion::AndroidJellyBean =
+    QOperatingSystemVersion(QOperatingSystemVersion::Android, 4, 1);
+
+/*!
+    \variable QOperatingSystemVersion::AndroidJellyBean_MR1
+    \brief a version corresponding to Android Jelly Bean, maintenance release 1
+    (version 4.2, API level 17).
+    \since 5.9
+ */
+const QOperatingSystemVersion QOperatingSystemVersion::AndroidJellyBean_MR1 =
+    QOperatingSystemVersion(QOperatingSystemVersion::Android, 4, 2);
+
+/*!
+    \variable QOperatingSystemVersion::AndroidJellyBean_MR2
+    \brief a version corresponding to Android Jelly Bean, maintenance release 2
+    (version 4.3, API level 18).
+    \since 5.9
+ */
+const QOperatingSystemVersion QOperatingSystemVersion::AndroidJellyBean_MR2 =
+    QOperatingSystemVersion(QOperatingSystemVersion::Android, 4, 3);
+
+/*!
+    \variable QOperatingSystemVersion::AndroidKitKat
+    \brief a version corresponding to Android KitKat (versions 4.4 & 4.4W, API levels 19 & 20).
+    \since 5.9
+ */
+const QOperatingSystemVersion QOperatingSystemVersion::AndroidKitKat =
+    QOperatingSystemVersion(QOperatingSystemVersion::Android, 4, 4);
+
+/*!
+    \variable QOperatingSystemVersion::AndroidLollipop
+    \brief a version corresponding to Android Lollipop (version 5.0, API level 21).
+    \since 5.9
+ */
+const QOperatingSystemVersion QOperatingSystemVersion::AndroidLollipop =
+    QOperatingSystemVersion(QOperatingSystemVersion::Android, 5, 0);
+
+/*!
+    \variable QOperatingSystemVersion::AndroidLollipop_MR1
+    \brief a version corresponding to Android Lollipop, maintenance release 1
+    (version 5.1, API level 22).
+    \since 5.9
+ */
+const QOperatingSystemVersion QOperatingSystemVersion::AndroidLollipop_MR1 =
+    QOperatingSystemVersion(QOperatingSystemVersion::Android, 5, 1);
+
+/*!
+    \variable QOperatingSystemVersion::AndroidMarshmallow
+    \brief a version corresponding to Android Marshmallow (version 6.0, API level 23).
+    \since 5.9
+ */
+const QOperatingSystemVersion QOperatingSystemVersion::AndroidMarshmallow =
+    QOperatingSystemVersion(QOperatingSystemVersion::Android, 6, 0);
+
+/*!
+    \variable QOperatingSystemVersion::AndroidNougat
+    \brief a version corresponding to Android Nougat (version 7.0, API level 24).
+    \since 5.9
+ */
+const QOperatingSystemVersion QOperatingSystemVersion::AndroidNougat =
+    QOperatingSystemVersion(QOperatingSystemVersion::Android, 7, 0);
+
+/*!
+    \variable QOperatingSystemVersion::AndroidNougat_MR1
+    \brief a version corresponding to Android Nougat, maintenance release 1
+    (version 7.0, API level 25).
+    \since 5.9
+ */
+const QOperatingSystemVersion QOperatingSystemVersion::AndroidNougat_MR1 =
+    QOperatingSystemVersion(QOperatingSystemVersion::Android, 7, 1);
+
+QT_END_NAMESPACE
diff --git a/private/qoperatingsystemversion_darwin.mm b/private/qoperatingsystemversion_darwin.mm
new file mode 100644
index 0000000..6dcd234
--- /dev/null
+++ b/private/qoperatingsystemversion_darwin.mm
@@ -0,0 +1,72 @@
+/****************************************************************************
+**
+** Copyright (C) 2016 The Qt Company Ltd.
+** Contact: https://www.qt.io/licensing/
+**
+** This file is part of the QtCore module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see https://www.qt.io/terms-conditions. For further
+** information use the contact form at https://www.qt.io/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 3 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL3 included in the
+** packaging of this file. Please review the following information to
+** ensure the GNU Lesser General Public License version 3 requirements
+** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 2.0 or (at your option) the GNU General
+** Public license version 3 or any later version approved by the KDE Free
+** Qt Foundation. The licenses are as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
+** included in the packaging of this file. Please review the following
+** information to ensure the GNU General Public License requirements will
+** be met: https://www.gnu.org/licenses/gpl-2.0.html and
+** https://www.gnu.org/licenses/gpl-3.0.html.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include "qoperatingsystemversion_p.h"
+#import <Foundation/Foundation.h>
+
+#if !QT_OSX_PLATFORM_SDK_EQUAL_OR_ABOVE(__MAC_10_10)
+// for objc_msgSend_stret()
+#import <objc/message.h>
+#endif
+
+QT_BEGIN_NAMESPACE
+
+QOperatingSystemVersion QOperatingSystemVersion::current()
+{
+#if QT_OSX_PLATFORM_SDK_EQUAL_OR_ABOVE(__MAC_10_10)
+    NSOperatingSystemVersion osv = NSProcessInfo.processInfo.operatingSystemVersion;
+#else
+    // NSOperatingSystemVersion exists on 10.9 but is "hidden"
+    typedef struct {
+        NSInteger majorVersion;
+        NSInteger minorVersion;
+        NSInteger patchVersion;
+    } NSOperatingSystemVersion;
+
+    NSOperatingSystemVersion osv = ((NSOperatingSystemVersion(*)(id, SEL))objc_msgSend_stret)([NSProcessInfo processInfo], @selector(operatingSystemVersion));
+#endif
+    QOperatingSystemVersion v;
+    v.m_os = currentType();
+    v.m_major = osv.majorVersion;
+    v.m_minor = osv.minorVersion;
+    v.m_micro = osv.patchVersion;
+    return v;
+}
+
+QT_END_NAMESPACE
diff --git a/private/qoperatingsystemversion_p.h b/private/qoperatingsystemversion_p.h
new file mode 100644
index 0000000..78d0daf
--- /dev/null
+++ b/private/qoperatingsystemversion_p.h
@@ -0,0 +1,87 @@
+/****************************************************************************
+**
+** Copyright (C) 2016 The Qt Company Ltd.
+** Contact: https://www.qt.io/licensing/
+**
+** This file is part of the QtCore module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see https://www.qt.io/terms-conditions. For further
+** information use the contact form at https://www.qt.io/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 3 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL3 included in the
+** packaging of this file. Please review the following information to
+** ensure the GNU Lesser General Public License version 3 requirements
+** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 2.0 or (at your option) the GNU General
+** Public license version 3 or any later version approved by the KDE Free
+** Qt Foundation. The licenses are as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
+** included in the packaging of this file. Please review the following
+** information to ensure the GNU General Public License requirements will
+** be met: https://www.gnu.org/licenses/gpl-2.0.html and
+** https://www.gnu.org/licenses/gpl-3.0.html.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QOPERATINGSYSTEMVERSION_P_H
+#define QOPERATINGSYSTEMVERSION_P_H
+
+//
+//  W A R N I N G
+//  -------------
+//
+// This file is not part of the Qt API. It exists purely as an
+// implementation detail. This header file may change from version to
+// version without notice, or even be removed.
+//
+// We mean it.
+//
+
+#include "qoperatingsystemversion.h"
+
+#ifdef Q_OS_WIN
+#include <qt_windows.h>
+#endif
+
+QT_BEGIN_NAMESPACE
+
+#ifdef Q_OS_WIN
+OSVERSIONINFOEX qWindowsVersionInfo();
+#endif
+
+static inline QOperatingSystemVersion::OSType currentType()
+{
+#if defined(Q_OS_WIN)
+    return QOperatingSystemVersion::Windows;
+#elif defined(Q_OS_MACOS)
+    return QOperatingSystemVersion::MacOS;
+#elif defined(Q_OS_IOS)
+    return QOperatingSystemVersion::IOS;
+#elif defined(Q_OS_TVOS)
+    return QOperatingSystemVersion::TvOS;
+#elif defined(Q_OS_WATCHOS)
+    return QOperatingSystemVersion::WatchOS;
+#elif defined(Q_OS_ANDROID)
+    return QOperatingSystemVersion::Android;
+#else
+    return QOperatingSystemVersion::Unknown;
+#endif
+}
+
+QT_END_NAMESPACE
+
+#endif // QOPERATINGSYSTEMVERSION_P_H
diff --git a/private/qstylehelper.cpp b/private/qstylehelper.cpp
index 9b381c3..ffb898d 100644
--- a/private/qstylehelper.cpp
+++ b/private/qstylehelper.cpp
@@ -415,6 +415,8 @@ QColor backgroundColor(const QPalette &pal, const QWidget* widget)
     if (qobject_cast<const QScrollBar *>(widget) && widget->parent() &&
             qobject_cast<const QAbstractScrollArea *>(widget->parent()->parent()))
         return widget->parentWidget()->parentWidget()->palette().color(QPalette::Base);
+#else
+    Q_UNUSED(widget);
 #endif
     return pal.color(QPalette::Base);
 }
diff --git a/qmacstyle_mac.mm b/qmacstyle_mac.mm
index fd39d45..b35317c 100644
--- a/qmacstyle_mac.mm
+++ b/qmacstyle_mac.mm
@@ -2151,7 +2151,12 @@ QMacStyle::QMacStyle()
       name:NSPreferredScrollerStyleDidChangeNotification
       object:nil];
 
-    d->nsscroller = [[NSScroller alloc] init];
+    // Create scroller objects. Scroller internal direction setup happens
+    // on initWithFrame and cannot be changed later on. Create two scrollers
+    // initialized with fake geometry. Correct geometry is set at draw time.
+    d->horizontalScroller = [[NSScroller alloc] initWithFrame:NSMakeRect(0, 0, 200, 20)];
+    d->verticalScroller = [[NSScroller alloc] initWithFrame:NSMakeRect(0, 0, 20, 200)];
+
     d->indicatorBranchButtonCell = nil;
 }
 
@@ -2160,7 +2165,8 @@ QMacStyle::~QMacStyle()
     Q_D(QMacStyle);
     QMacAutoReleasePool pool;
 
-    [reinterpret_cast<NSScroller*>(d->nsscroller) release];
+    [d->horizontalScroller release];
+    [d->verticalScroller release];
 
     AltNotificationReceiver *receiver = static_cast<AltNotificationReceiver *>(d->receiver);
     [[NSNotificationCenter defaultCenter] removeObserver:receiver];
@@ -2505,11 +2511,13 @@ int QMacStyle::pixelMetric(PixelMetric metric, const QStyleOption *opt, const QW
     case PM_ButtonDefaultIndicator:
         ret = 0;
         break;
-    case PM_TitleBarHeight:
-        // Always use NSTitledWindowMask since we never need any other type of window here
+    case PM_TitleBarHeight: {
+        NSUInteger style = NSTitledWindowMask;
+        if (widget && ((widget->windowFlags() & Qt::Tool) == Qt::Tool))
+            style |= NSUtilityWindowMask;
         ret = int([NSWindow frameRectForContentRect:NSZeroRect
-                                          styleMask:NSTitledWindowMask].size.height);
-        break;
+                                          styleMask:style].size.height);
+        break; }
     case QStyle::PM_TabBarTabHSpace:
         switch (d->aquaSizeConstrain(opt, widget)) {
         case QAquaSizeLarge:
@@ -2538,7 +2546,7 @@ int QMacStyle::pixelMetric(PixelMetric metric, const QStyleOption *opt, const QW
         ret = 0;
         break;
     case PM_TabBarBaseHeight:
-        ret = 21;
+        ret = 0;
         break;
     case PM_TabBarTabOverlap:
         ret = 1;
@@ -5571,8 +5579,7 @@ void QMacStyle::drawComplexControl(ComplexControl cc, const QStyleOptionComplex
 
                 [NSGraphicsContext setCurrentContext:[NSGraphicsContext
                      graphicsContextWithGraphicsPort:(CGContextRef)cg flipped:NO]];
-                NSScroller *scroller = reinterpret_cast<NSScroller*>(d->nsscroller);
-                [scroller initWithFrame:NSMakeRect(0, 0, slider->rect.width(), slider->rect.height())];
+                NSScroller *scroller = isHorizontal ? d->horizontalScroller : d-> verticalScroller;
                 // mac os behaviour: as soon as one color channel is >= 128,
                 // the bg is considered bright, scroller is dark
                 const QColor bgColor = QStyleHelper::backgroundColor(opt->palette, widget);
@@ -5684,16 +5691,18 @@ void QMacStyle::drawComplexControl(ComplexControl cc, const QStyleOptionComplex
                         sl.intValue = slider->sliderValue;
                         sl.enabled = slider->state & QStyle::State_Enabled;
                         d->drawNSViewInRect(cw, sl, opt->rect, p, widget != 0, ^(NSRect rect, CGContextRef ctx) {
+                                                const bool isSierraOrLater = QOperatingSystemVersion::current() >= QOperatingSystemVersion::MacOSSierra;
                                                 if (slider->upsideDown) {
                                                     if (isHorizontal) {
                                                         CGContextTranslateCTM(ctx, rect.size.width, 0);
                                                         CGContextScaleCTM(ctx, -1, 1);
                                                     }
-                                                } else if (!isHorizontal) {
+                                                } else if (!isHorizontal && !isSierraOrLater) {
                                                     CGContextTranslateCTM(ctx, 0, rect.size.height);
                                                     CGContextScaleCTM(ctx, 1, -1);
                                                 }
-                                                [sl.cell drawBarInside:NSRectFromCGRect(tdi.bounds) flipped:NO];
+                                                const bool shouldFlip = isHorizontal || (slider->upsideDown && isSierraOrLater);
+                                                [sl.cell drawBarInside:NSRectFromCGRect(tdi.bounds) flipped:shouldFlip];
                                                 // No need to restore the CTM later, the context has been saved
                                                 // and will be restored at the end of drawNSViewInRect()
                                             });
diff --git a/qmacstyle_mac_p_p.h b/qmacstyle_mac_p_p.h
index 8409d0d..12247f3 100644
--- a/qmacstyle_mac_p_p.h
+++ b/qmacstyle_mac_p_p.h
@@ -115,6 +115,9 @@
 // We mean it.
 //
 
+Q_FORWARD_DECLARE_OBJC_CLASS(NSView);
+Q_FORWARD_DECLARE_OBJC_CLASS(NSScroller);
+
 QT_BEGIN_NAMESPACE
 
 /*
@@ -246,7 +249,8 @@ public:
     CFAbsoluteTime defaultButtonStart;
     bool mouseDown;
     void* receiver;
-    void *nsscroller;
+    NSScroller *horizontalScroller;
+    NSScroller *verticalScroller;
     void *indicatorBranchButtonCell;
     NSView *backingStoreNSView;
     QHash<QCocoaWidget, NSView *> cocoaControls;
